{"count":43,"next":null,"previous":null,"results":[{"_class":"assessment","id":49083812,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements regarding to pipelines and the Aggregation Framework. (select 3)</p>","relatedLectureIds":"","feedbacks":["","","","",""],"explanation":"<p>Aggregation operations process multiple documents and return computed results. You can use aggregation operations to:</p><ul><li><p>Group values from multiple documents together.</p></li><li><p>Perform operations on the grouped data to return a single result.</p></li><li><p>Analyze data changes over time.</p></li></ul><p>To perform aggregation operations, you can use:</p><ul><li><p>Aggregation pipelines, which are the preferred method for performing aggregations.</p></li><li><p>Single purpose aggregation methods, which are simple but lack the capabilities of an aggregation pipeline.</p></li></ul><p><br></p><p>An aggregation pipeline consists of one or more stages that process documents:</p><ul><li><p>Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.</p></li><li><p>The documents that are output from a stage are passed to the next stage.</p></li><li><p>An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.</p></li></ul><p><br></p><p>https://docs.mongodb.com/manual/aggregation/</p>","answers":["<p>An aggregation pipeline consists of one or more stages that process documents.</p>","<p>The Aggregation Framework provides us many stages to filter and transform data.</p>","<p>Aggregation Framework does not have the group stage for grouping data.</p>","<p>The aggregation pipeline cannot operate on a sharded collection.</p>","<p>An aggregation pipeline is an array of stages.</p>"]},"correct_response":["a","b","e"],"updated":"2022-07-16T11:37:53Z","section":""},{"_class":"assessment","id":49083814,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>How can we present the basic syntax for aggregation in MongoDB?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p>Aggregation operations process multiple documents and return computed results. You can use aggregation operations to:</p><ul><li><p>Group values from multiple documents together.</p></li><li><p>Perform operations on the grouped data to return a single result.</p></li><li><p>Analyze data changes over time.</p></li></ul><p>To perform aggregation operations, you can use:</p><ul><li><p>Aggregation pipelines, which are the preferred method for performing aggregations.</p></li><li><p>Single purpose aggregation methods, which are simple but lack the capabilities of an aggregation pipeline.</p></li></ul><p><br></p><p>An aggregation pipeline consists of one or more stages that process documents:</p><ul><li><p>Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.</p></li><li><p>The documents that are output from a stage are passed to the next stage.</p></li><li><p>An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.</p></li></ul><p><br></p><p>Basic syntax:</p><p><br></p><pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n],&nbsp;{&nbsp;options&nbsp;}&nbsp;)</pre><p><br></p><p>https://docs.mongodb.com/manual/aggregation/</p>","answers":["<pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n],&nbsp;{&nbsp;options&nbsp;}&nbsp;)</pre>","<pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;options&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;options&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.myCollection.find([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n],&nbsp;{&nbsp;options&nbsp;}&nbsp;)</pre>"]},"correct_response":["a"],"updated":"2022-07-16T11:39:43Z","section":""},{"_class":"assessment","id":49083816,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>What is the best practice in using the <code>$match</code> operator? </p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code><strong>$match</strong></code><strong> </strong>filters the documents to pass only the documents that match the specified condition(s) to the next pipeline stage. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{ $match: { &lt;query&gt; } }</pre><p><br></p><p>Place the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> as early in the aggregation pipeline as possible. Because <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> limits the total number of documents in the aggregation pipeline, earlier <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> operations minimize the amount of processing down the pipe.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/match/</p>","answers":["<p>The earlier in the pipeline, the better. Not only because we will be using expression filters which reduce the number of documents to be processed, but also because we can use indexes.</p>","<p>The later in the pipeline, the better.</p>","<p>It doesn't matter when we apply <code>$match</code> stage.</p>","<p>MongoDB does not have a <code>$match</code> stage.</p>"]},"correct_response":["a"],"updated":"2022-07-16T11:42:14Z","section":""},{"_class":"assessment","id":49083818,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a<em> movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd60e4\"),\n&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;'The&nbsp;Immigrant',\n&nbsp;&nbsp;&nbsp;&nbsp;released:&nbsp;ISODate(\"1917-06-17T00:00:00.000Z\"),\n&nbsp;&nbsp;&nbsp;&nbsp;rated:&nbsp;'UNRATED',\n&nbsp;&nbsp;&nbsp;&nbsp;year:&nbsp;1917,\n&nbsp;&nbsp;&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;7.8,&nbsp;votes:&nbsp;4680,&nbsp;id:&nbsp;8133&nbsp;}\n}</pre><p><br></p><p>We need to filter those movies where the imdb rating is greater then 7. Which query should we use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.find(query, projection)</code> selects documents in a collection or view and returns a cursor to the selected documents.</p><p><br></p><p><a href=\"https://www.mongodb.com/docs/manual/reference/operator/query/gt/#mongodb-query-op.-gt\"><code>$gt</code></a> selects those documents where the value of the <code>field</code> is greater than (i.e. <code>&gt;</code>) the specified <code>value</code>. Syntax: <code>{ field: { $gt: value } }</code></p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.find/</p><p>https://www.mongodb.com/docs/manual/reference/operator/query/gt/</p>","answers":["<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;\"$gt\":&nbsp;7&nbsp;}&nbsp;} )</pre>","<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;\"$gte\":&nbsp;7&nbsp;}&nbsp;} )</pre>","<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;imdb.rating:&nbsp;{&nbsp;\"$gt\":&nbsp;7&nbsp;}&nbsp;} )</pre>","<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;\"$lt\":&nbsp;7&nbsp;}&nbsp;} )</pre>"]},"correct_response":["a"],"updated":"2022-07-16T11:44:16Z","section":""},{"_class":"assessment","id":49083820,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd6223\"),\n    genres: [ 'Comedy', 'Drama', 'Family' ],\n    title: 'The Poor Little Rich Girl',\n    released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n    year: 1917,\n    imdb: { rating: 6.9, votes: 884, id: 8443 }\n}</pre><p><br></p><p>We need to extract all <code>'Crime'</code> movies from this collection. Which query should we use? (select 2)</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.find(query, projection)</code> selects documents in a collection or view and returns a cursor to the selected documents.</p><p><br></p><p>The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/query/in/#mongodb-query-op.-in\"><code>$in</code></a> operator selects the documents where the value of a field equals any value in the specified array. To specify an <a href=\"https://www.mongodb.com/docs/manual/reference/operator/query/in/#mongodb-query-op.-in\"><code>$in</code></a> expression, use the following prototype:</p><p><br></p><pre class=\"prettyprint linenums\">{ field: { $in: [&lt;value1&gt;, &lt;value2&gt;, ... &lt;valueN&gt; ] } }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.find/</p><p>https://www.mongodb.com/docs/manual/reference/operator/query/in/</p>","answers":["<pre class=\"prettyprint linenums\">db.movies.find( { \"genres\": { \"$in\" : [\"Crime\"] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { \"genres\": \"Crime\" } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { \"genres\": { \"$nin\" : [\"Crime\"] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { \"genres\": { \"$equal\" : [\"Crime\"] } } )</pre>"]},"correct_response":["a","b"],"updated":"2022-07-16T11:45:42Z","section":""},{"_class":"assessment","id":49083822,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd6223\"),\n    genres: [ 'Comedy', 'Drama', 'Family' ],\n    title: 'The Poor Little Rich Girl',\n    released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n    year: 1917,\n    imdb: { rating: 6.9, votes: 884, id: 8443 }\n}</pre><p><br></p><p>We need to extract all movies from this collection where genres includes both <code>'Crime'</code> and <code>'Mystery'</code>. Which query should we use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p>The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/query/all/#mongodb-query-op.-all\"><code>$all</code></a> operator selects the documents where the value of a field is an array that contains all the specified elements. To specify an <a href=\"https://www.mongodb.com/docs/manual/reference/operator/query/all/#mongodb-query-op.-all\"><code>$all</code></a> expression, use the following prototype:</p><p><br></p><pre class=\"prettyprint linenums\">{ &lt;field&gt;: { $all: [ &lt;value1&gt; , &lt;value2&gt; ... ] } }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/query/all/</p>","answers":["<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $all: [\"Crime\", \"Mystery\"] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $in: [\"Crime\", \"Mystery\"] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $nin: [\"Crime\", \"Mystery\"] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $any: [\"Crime\", \"Mystery\"] } } )</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:04:56Z","section":""},{"_class":"assessment","id":49083824,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd6223\"),\n    genres: [ 'Comedy', 'Drama', 'Family' ],\n    title: 'The Poor Little Rich Girl',\n    released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n    year: 1917,\n    imdb: { rating: 6.9, votes: 884, id: 8443 }\n}</pre><p><br></p><p>We need to extract all movies from this collection where genres does not include <code>'Romance'</code>. Which query should we use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p>https://docs.mongodb.com/manual/reference/operator/query/nin/</p>","answers":["<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $nin: ['Romance'] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $in: ['Romance'] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $or: ['Romance'] } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.find( { genres: { $and: ['Romance'] } } )</pre>"]},"correct_response":["a"],"updated":"2022-07-16T11:37:52Z","section":""},{"_class":"assessment","id":49083826,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p><code>$group</code> stage can be used multiple times within an aggregation pipeline.</p>","relatedLectureIds":"","feedbacks":["",""],"explanation":"<p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group\"><code>$group</code></a> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  $group:\n    {\n      _id: &lt;expression&gt;, // Group key\n      &lt;field1&gt;: { &lt;accumulator1&gt; : &lt;expression1&gt; },\n      ...\n    }\n }</pre><p><br></p><p>All except the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\"><code>$out</code></a>, <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/#mongodb-pipeline-pipe.-merge\"><code>$merge</code></a>, and <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/geoNear/#mongodb-pipeline-pipe.-geoNear\"><code>$geoNear</code></a> stages can appear multiple times in a pipeline.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/group/</p>","answers":["<p>True</p>","<p>False</p>"]},"correct_response":["a"],"updated":"2022-07-16T12:08:22Z","section":""},{"_class":"assessment","id":49083828,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select properly used <code>$out</code> operator. (select 1)</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code><strong>$out</strong></code><strong> </strong>stage takes the documents returned by the aggregation pipeline and writes them to a specified collection. Starting in MongoDB 4.4, you can specify the output database. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\"><code>$out</code></a> stage must be <em>the last stage</em> in the pipeline. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\"><code>$out</code></a> operator lets the aggregation framework return result sets of any size.</p><p><br></p><p>Starting in MongoDB 4.4, <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\"><code>$out</code></a> can take a document to specify the output database as well as the output collection:</p><p><br></p><pre class=\"prettyprint linenums\">{ $out: { db: \"&lt;output-db&gt;\", coll: \"&lt;output-collection&gt;\" } }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/out/</p>","answers":["<pre class=\"prettyprint linenums\">db.collection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage1 },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage2 },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ stageN },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ $out:&nbsp;\"new_collection\" }\n])</pre>","<pre class=\"prettyprint linenums\">db.collection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{ $out:&nbsp;\"new_collection\" },&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage1 },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage2 },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ $stageN }\n])</pre>","<pre class=\"prettyprint linenums\">db.collection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage1 },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ $out:&nbsp;\"new_collection\" },\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage2 },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ stageN }\n])</pre>","<pre class=\"prettyprint linenums\">db.collection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage1 },&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{ $out:&nbsp;\"new_collection\" },\n&nbsp;&nbsp;&nbsp;&nbsp;{ stage2 }\n])</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:10:51Z","section":""},{"_class":"assessment","id":49083830,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements regarding to <code>$out</code> stage. (select 3)</p>","relatedLectureIds":"","feedbacks":["","","","",""],"explanation":"<p><code><strong>$out</strong></code><strong> </strong>stage takes the documents returned by the aggregation pipeline and writes them to a specified collection. Starting in MongoDB 4.4, you can specify the output database. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\"><code>$out</code></a> stage must be <em>the last stage</em> in the pipeline. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\"><code>$out</code></a> operator lets the aggregation framework return result sets of any size.</p><p><br></p><p>Starting in MongoDB 4.4, <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\"><code>$out</code></a> can take a document to specify the output database as well as the output collection:</p><p><br></p><pre class=\"prettyprint linenums\">{ $out: { db: \"&lt;output-db&gt;\", coll: \"&lt;output-collection&gt;\" } }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/out/</p>","answers":["<p><code>$out</code> operator will not overwrite an existing collection if specified.</p>","<p>All indexes on an existing collection are rebuilt when <code>$out</code> overwrites the collection.</p>","<p><code>$out</code> operator must be the last stage in a pipeline.</p>","<p><code>$out</code> operator will create a new empty collection or overwrite an existing collection if the pipeline raises an error.</p>","<p><code>$out</code> operator creates collections in the same database as the source collection.</p>"]},"correct_response":["b","c","e"],"updated":"2022-07-16T12:12:06Z","section":""},{"_class":"assessment","id":49083832,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>What is a MongoDB view?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p>A MongoDB view is a queryable object whose contents are defined by an aggregation pipeline on other collections or views. MongoDB does not persist the view contents to disk. A view's content is computed on-demand when a client queries the view. MongoDB can require clients to have permission to query the view. MongoDB does not support write operations against views.</p><p><br></p><p>https://docs.mongodb.com/manual/core/views/</p>","answers":["<p>A MongoDB view is a queryable object whose contents are defined by an aggregation pipeline on other collections or views.</p>","<p>MongoDB does not support views.</p>","<p>It is a different name for collection.</p>","<p>It's a built-in database to store users information.</p>"]},"correct_response":["a"],"updated":"2022-07-16T12:13:29Z","section":""},{"_class":"assessment","id":49083834,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Which of the following statements are true regarding MongoDB views? (select 4)</p>","relatedLectureIds":"","feedbacks":["","","","",""],"explanation":"<p>A MongoDB view is a queryable object whose contents are defined by an aggregation pipeline on other collections or views. MongoDB does not persist the view contents to disk. A view's content is computed on-demand when a client queries the view. MongoDB can require clients to have permission to query the view. MongoDB does not support write operations against views.</p><p><br></p><p>https://docs.mongodb.com/manual/core/views/</p>","answers":["<p>MongoDB views themselves don't contain data.</p>","<p>MongoDB views are created on demand and reflect the data in the source collection.</p>","<p>Views are write only.</p>","<p>Views are read only.</p>","<p>Write operations to views will raise an error.</p>"]},"correct_response":["a","b","d","e"],"updated":"2022-07-16T12:14:20Z","section":""},{"_class":"assessment","id":49083836,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>What stages will cause a merge on the primary shard for a database?</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>$group</code> stage can potentially result in a merge, but a random shard will be selected for the merging.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/out/</p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/</p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/group/</p>","answers":["<pre class=\"prettyprint linenums\">$lookup</pre>","<pre class=\"prettyprint linenums\">$out</pre>","<pre class=\"prettyprint linenums\">$group</pre>"]},"correct_response":["a","b"],"updated":"2022-07-16T12:15:22Z","section":""},{"_class":"assessment","id":49083838,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Given a <em>movies </em>collection where each document has the following structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd60e4\"),\n    genres: [ 'Short', 'Comedy', 'Drama' ],\n    title: 'The Immigrant',\n    year: 1917,\n    imdb: { rating: 7.8, votes: 4680, id: 8133 },\n    countries: [ 'USA' ]\n}</pre><p><br></p><p>This time we are using the Aggregation Framework to search our database. Which of the following queries will find all movies with a rating greater than 8?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;imdb.rating:&nbsp;{&nbsp;$gt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre><p><br></p><p>This is incorrect because we need to use quotes in this case.</p><p><br></p><pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$gte:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre><p><br></p><p>This is incorrect because $gte also checks for equality.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$gt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$gte:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;imdb.rating:&nbsp;{&nbsp;$gt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$lt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:48:14Z","section":""},{"_class":"assessment","id":49083840,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>In your database there is a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd42e8\"),\n&nbsp;&nbsp;genres:&nbsp;[&nbsp;'Short',&nbsp;'Western'&nbsp;],\n&nbsp;&nbsp;title:&nbsp;'The&nbsp;Great&nbsp;Train&nbsp;Robbery',\n&nbsp;&nbsp;rated:&nbsp;'TV-G',\n&nbsp;&nbsp;year:&nbsp;1903,\n&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;7.4,&nbsp;votes:&nbsp;9847,&nbsp;id:&nbsp;439&nbsp;},\n&nbsp;&nbsp;countries:&nbsp;[&nbsp;'USA'&nbsp;]\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd4323\"),\n&nbsp;&nbsp;genres:&nbsp;[&nbsp;'Short',&nbsp;'Drama',&nbsp;'Fantasy'&nbsp;],\n&nbsp;&nbsp;rated:&nbsp;'UNRATED',\n&nbsp;&nbsp;title:&nbsp;'The&nbsp;Land&nbsp;Beyond&nbsp;the&nbsp;Sunset',\n&nbsp;&nbsp;year:&nbsp;1912,\n&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;7.1,&nbsp;votes:&nbsp;448,&nbsp;id:&nbsp;488&nbsp;},\n&nbsp;&nbsp;countries:&nbsp;[&nbsp;'USA'&nbsp;]\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd446f\"),\n&nbsp;&nbsp;genres:&nbsp;[&nbsp;'Short',&nbsp;'Drama'&nbsp;],\n&nbsp;&nbsp;title:&nbsp;'A&nbsp;Corner&nbsp;in&nbsp;Wheat',\n&nbsp;&nbsp;rated:&nbsp;'G',\n&nbsp;&nbsp;year:&nbsp;1909,\n&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;6.6,&nbsp;votes:&nbsp;1375,&nbsp;id:&nbsp;832&nbsp;},\n&nbsp;&nbsp;countries:&nbsp;[&nbsp;'USA'&nbsp;]\n}</pre><p><br></p><p>How can you group these documents to extract all different values for <em>rated </em>field?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">db.movies.aggregate(&nbsp;{&nbsp;$group:&nbsp;{&nbsp;_id:&nbsp;'$rated'&nbsp;}&nbsp;} )</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate( { $group: '$rated' } )</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate(&nbsp;{&nbsp;$group:&nbsp;{&nbsp;_id:&nbsp;'rated'&nbsp;}&nbsp;} )</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate(&nbsp;{&nbsp;$count:&nbsp;{&nbsp;_id:&nbsp;'$rated'&nbsp;}&nbsp;} )</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:50:36Z","section":""},{"_class":"assessment","id":49083842,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>In your database there is a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd42e8\"),\n&nbsp;&nbsp;genres:&nbsp;[&nbsp;'Short',&nbsp;'Western'&nbsp;],\n&nbsp;&nbsp;title:&nbsp;'The&nbsp;Great&nbsp;Train&nbsp;Robbery',\n&nbsp;&nbsp;rated:&nbsp;'TV-G',\n&nbsp;&nbsp;year:&nbsp;1903,\n&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;7.4,&nbsp;votes:&nbsp;9847,&nbsp;id:&nbsp;439&nbsp;},\n&nbsp;&nbsp;countries:&nbsp;[&nbsp;'USA'&nbsp;]\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd4323\"),\n&nbsp;&nbsp;genres:&nbsp;[&nbsp;'Short',&nbsp;'Drama',&nbsp;'Fantasy'&nbsp;],\n&nbsp;&nbsp;rated:&nbsp;'UNRATED',\n&nbsp;&nbsp;title:&nbsp;'The&nbsp;Land&nbsp;Beyond&nbsp;the&nbsp;Sunset',\n&nbsp;&nbsp;year:&nbsp;1912,\n&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;7.1,&nbsp;votes:&nbsp;448,&nbsp;id:&nbsp;488&nbsp;},\n&nbsp;&nbsp;countries:&nbsp;[&nbsp;'USA'&nbsp;]\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd446f\"),\n&nbsp;&nbsp;genres:&nbsp;[&nbsp;'Short',&nbsp;'Drama'&nbsp;],\n&nbsp;&nbsp;title:&nbsp;'A&nbsp;Corner&nbsp;in&nbsp;Wheat',\n&nbsp;&nbsp;rated:&nbsp;'G',\n&nbsp;&nbsp;year:&nbsp;1909,\n&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;6.6,&nbsp;votes:&nbsp;1375,&nbsp;id:&nbsp;832&nbsp;},\n&nbsp;&nbsp;countries:&nbsp;[&nbsp;'USA'&nbsp;]\n}</pre><p><br></p><p>How can you group these documents to extract the distribution of <em>rated </em>field?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p><code>$sum</code> calculates and returns the collective sum of numeric values. <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/sum/#mongodb-group-grp.-sum\"><code>$sum</code></a> ignores non-numeric values.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">db.movies.aggregate( { $group: { _id: '$rated', count: { $sum: 1 } } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate( { $group: { _id: 'rated', count: { $sum: 1 } } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate( { $group: { _id: '$rated', $count: { $sum: 1 } } } )</pre>","<pre class=\"prettyprint linenums\">db.movies.aggregate( { $group: { _id: '$rated', count: { $avg: 1 } } } )</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:52:24Z","section":""},{"_class":"assessment","id":49083844,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd6223\"),\n    genres: [ 'Comedy', 'Drama', 'Family' ],\n    title: 'The Poor Little Rich Girl',\n    released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n    year: 1917,\n    imdb: { rating: 6.9, votes: 884, id: 8443 }\n}</pre><p><br></p><p>We need to use Aggregation Framework to fetch all movies from this collection where <code>'Drama'</code> is in genres list and the minimum <code>'imdb.votes'</code> is at least 100. Additionally, in the projection stage, we want to leave only the following fields:</p><p><em>-&gt;&nbsp;title</em></p><p><em>-&gt; genres</em></p><p><em>-&gt; imdb.votes</em></p><p><br></p><p><strong>Example output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;  title:&nbsp;'Miss&nbsp;Lulu&nbsp;Bett',\n&nbsp;&nbsp;  genres:&nbsp;[&nbsp;'Comedy',&nbsp;'Drama'&nbsp;],\n&nbsp;&nbsp;  imdb:&nbsp;{&nbsp;votes:&nbsp;204&nbsp;}\n}</pre><p><br></p><p>Which pipeline should you use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$match:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$in:&nbsp;['Drama']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$gte:&nbsp;100\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$project:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$match:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$nin:&nbsp;['Drama']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$gte:&nbsp;100\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$project:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$match:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$in:&nbsp;['Drama']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$project:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:53:12Z","section":""},{"_class":"assessment","id":49083846,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd6223\"),\n    genres: [ 'Comedy', 'Drama', 'Family' ],\n    title: 'The Poor Little Rich Girl',\n    released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n    year: 1917,\n    imdb: { rating: 6.9, votes: 884, id: 8443 }\n}</pre><p><br></p><p>We need to use Aggregation Framework to fetch all movies from this collection where <code>'Drama'</code> is in genres list and the minimum <code>'imdb.votes'</code> is at least 100. Additionally, in the projection stage, we want to leave only the following fields:</p><p><em>-&gt;&nbsp;title</em></p><p><em>-&gt; genres</em></p><p><em>-&gt; imdb.votes</em></p><p><br></p><p>We also want to sort the result set by decreasing imdb votes.</p><p><br></p><p><strong>Example output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n    {\n        imdb: { votes: 1521105 },\n        genres: [ 'Crime', 'Drama' ],\n        title: 'The Shawshank Redemption'\n    },\n    {\n        imdb: { votes: 1513145 },\n        genres: [ 'Crime', 'Drama' ],\n        title: 'The Shawshank Redemption'\n    },\n    {\n        imdb: { votes: 1495351 },\n        genres: [ 'Action', 'Crime', 'Drama' ],\n        title: 'The Dark Knight'\n    },\n...</pre><p><br></p><p>Which pipeline should you use?</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">[{\n    $match: {\n        genres: {\n            $in: ['Drama']\n        },\n        'imdb.votes': {\n            $gte: 100\n        }\n    }\n}, {\n    $project: {\n        _id: 0,\n        title: 1,\n        genres: 1,\n        'imdb.votes': 1\n    }\n}, {\n    $sort: {\n        'imdb.votes': -1\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $match: {\n        genres: {\n            $in: ['Drama']\n        },\n        'imdb.votes': {\n            $gte: 100\n        }\n    }\n}, {\n    $project: {\n        _id: 0,\n        title: 1,\n        genres: 1,\n        'imdb.votes': 1\n    }\n}, {\n    $limit: {\n        'imdb.votes': -1\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $match: {\n        genres: {\n            $in: ['Drama']\n        },\n        'imdb.votes': {\n            $gte: 100\n        }\n    }\n}, {\n    $project: {\n        _id: 0,\n        title: 1,\n        genres: 1,\n        'imdb.votes': 1\n    }\n}, {\n    $sort: {\n        'imdb.votes': 1\n    }\n}]</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:53:46Z","section":""},{"_class":"assessment","id":49083848,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd6223\"),\n    genres: [ 'Comedy', 'Drama', 'Family' ],\n    title: 'The Poor Little Rich Girl',\n    released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n    year: 1917,\n    imdb: { rating: 6.9, votes: 884, id: 8443 }\n}</pre><p><br></p><p>We need to use Aggregation Framework to fetch all movies from this collection where <code>'Drama'</code> is not in genres list and the minimum <code>'imdb.votes'</code> is at least 100. Additionally, in the projection stage, we want to leave only the following fields:</p><p><em>-&gt;&nbsp;title</em></p><p><em>-&gt; genres</em></p><p><em>-&gt; imdb.votes</em></p><p><br></p><p>We also want to sort the result set by decreasing imdb votes and limit the number of documents retuned to 5.</p><p><br></p><p><strong>Example output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n    {\n        imdb: { votes: 1294646 },\n        genres: [ 'Action', 'Mystery', 'Sci-Fi' ],\n        title: 'Inception'\n    },\n    {\n        imdb: { votes: 1109724 },\n        genres: [ 'Adventure', 'Fantasy' ],\n        title: 'The Lord of the Rings: The Fellowship of the Ring'\n    },\n    {\n        imdb: { votes: 1081144 },\n        genres: [ 'Adventure', 'Fantasy' ],\n        title: 'The Lord of the Rings: The Return of the King'\n    },\n    {\n        imdb: { votes: 1080566 },\n        genres: [ 'Action', 'Sci-Fi' ],\n        title: 'The Matrix'\n    },\n    {\n        imdb: { votes: 1004805 },\n        genres: [ 'Action', 'Thriller' ],\n        title: 'The Dark Knight Rises'\n    }\n]</pre><p><br></p><p>Which pipeline should you use?</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">[{\n    $match: {\n        genres: {\n            $nin: ['Drama']\n        },\n        'imdb.votes': {\n            $gte: 100\n        }\n    }\n}, {\n    $project: {\n        _id: 0,\n        title: 1,\n        genres: 1,\n        'imdb.votes': 1\n    }\n}, {\n    $sort: {\n        'imdb.votes': -1\n    }\n}, {\n    $limit: 5\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $match: {\n        genres: {\n            $in: ['Drama']\n        },\n        'imdb.votes': {\n            $gte: 100\n        }\n    }\n}, {\n    $project: {\n        _id: 0,\n        title: 1,\n        genres: 1,\n        'imdb.votes': 1\n    }\n}, {\n    $sort: {\n        'imdb.votes': -1\n    }\n}, {\n    $limit: 5\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $match: {\n        genres: {\n            $nin: ['Drama']\n        },\n        'imdb.votes': {\n            $gte: 100\n        }\n    }\n}, {\n    $project: {\n        _id: 0,\n        title: 1,\n        genres: 1,\n        'imdb.votes': 1\n    }\n}, {\n    $sort: {\n        'imdb.votes': -1\n    }\n}]</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:54:19Z","section":""},{"_class":"assessment","id":49083850,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>movies </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  _id: ObjectId(\"573a1390f29313caabcd6223\"),\n  genres: [ 'Comedy', 'Drama', 'Family' ],\n  title: 'The Poor Little Rich Girl',\n  released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n  year: 1917,\n  imdb: { rating: 6.9, votes: 884, id: 8443 }\n},\n{\n  _id: ObjectId(\"573a13e3f29313caabdc08a4\"),\n  genres: [ 'Horror', 'Thriller' ],\n  title: 'Mary Loss of Soul',\n  year: 2014,\n  imdb: { rating: '', votes: '', id: 2904798 }\n}</pre><p><br></p><p>We need to use Aggregation Framework to calculate the following aggregates:</p><p>-&gt;&nbsp;average imdb rating</p><p>-&gt; minimum imdb rating</p><p>-&gt; maximum imdb rating</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n    {\n        _id: null,\n        avg_rating: 6.6934040649367255,\n        min_rating: 1.6,\n        max_rating: 9.6\n    }\n]</pre><p><br></p><p>Please note that some documents have <code>\"\"</code> (empty string) for the field <code>\"imdb.rating\"</code>. Exclude these documents before aggregation.</p><p><br></p><p>Which pipeline should you use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">[{\n    $match: {\n        \"imdb.rating\": {\n            $ne: \"\"\n        }\n    }\n}, {\n    $group: {\n        _id: null,\n        avg_rating: {\n            $avg: \"$imdb.rating\"\n        },\n        min_rating: {\n            $min: \"$imdb.rating\"\n        },\n        max_rating: {\n            $max: \"$imdb.rating\"\n        }\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $match: {\n        \"imdb.rating\": {\n            $ne: \"\"\n        }\n    }\n}, {\n    $group: {\n        _id: null,\n        avg_rating: {\n            avg: \"$imdb.rating\"\n        },\n        min_rating: {\n            min: \"$imdb.rating\"\n        },\n        max_rating: {\n            max: \"$imdb.rating\"\n        }\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $match: {\n        \"imdb.rating\": {\n            $ne: \"\"\n        }\n    }\n}, {\n    $group: {\n        _id: null,\n        avg_rating: {\n            $avg: \"imdb.rating\"\n        },\n        min_rating: {\n            $min: \"imdb.rating\"\n        },\n        max_rating: {\n            $max: \"imdb.rating\"\n        }\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $group: {\n        _id: null,\n        avg_rating: {\n            $avg: \"$imdb.rating\"\n        },\n        min_rating: {\n            $min: \"$imdb.rating\"\n        },\n        max_rating: {\n            $max: \"$imdb.rating\"\n        }\n    }\n}]</pre>"]},"correct_response":["a"],"updated":"2022-07-16T12:54:52Z","section":""},{"_class":"assessment","id":49083852,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have a <em>restaurants </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  _id: ObjectId(\"5eb3d668b31de5d588f42a7d\"),\n  address: {\n    building: '605',\n    coord: [ -74.0060152, 40.7372653 ],\n    street: 'Hudson Street',\n    zipcode: '10014'\n  },\n  cuisine: 'French',\n  grades: [\n    {\n      date: ISODate(\"2014-06-30T00:00:00.000Z\"),\n      grade: 'A',\n      score: 10\n    },\n    {\n      date: ISODate(\"2013-05-20T00:00:00.000Z\"),\n      grade: 'A',\n      score: 13\n    },\n    {\n      date: ISODate(\"2012-12-11T00:00:00.000Z\"),\n      grade: 'A',\n      score: 9\n    }\n  ],\n  name: 'La Ripaille Restaurant'\n}</pre><p><br></p><p>We need to use Aggregation Framework to calculate the total number of restaurants for top 5 cuisine (sorted in descending order by the number of restaurants).</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n    { _id: 'American', total_restaurants: 6183 },\n    { _id: 'Chinese', total_restaurants: 2418 },\n    { _id: 'Café/Coffee/Tea', total_restaurants: 1214 },\n    { _id: 'Pizza', total_restaurants: 1163 },\n    { _id: 'Italian', total_restaurants: 1069 }\n]</pre><p><br></p><p>Which pipeline should you use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">[{\n    $group: {\n        _id: \"$cuisine\",\n        total_restaurants: {\n            $sum: 1\n        }\n    }\n}, {\n    $sort: {\n        total_restaurants: -1\n    }\n}, {\n    $limit: 5\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $group: {\n        _id: \"$cuisine\",\n        total_restaurants: {\n            $sum: 1\n        }\n    }\n}, {\n    $sort: {\n        total_restaurants: 1\n    }\n}, {\n    $limit: 5\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $group: {\n        _id: \"cuisine\",\n        total_restaurants: {\n            $sum: 1\n        }\n    }\n}, {\n    $sort: {\n        total_restaurants: -1\n    }\n}, {\n    $limit: 5\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $group: {\n        _id: \"$cuisine\",\n        total_restaurants: {\n            $sum: 1\n        }\n    }\n}, {\n    $limit: 5\n}, {\n    $sort: {\n        total_restaurants: -1\n    }\n}]</pre>"]},"correct_response":["a"],"updated":"2022-07-16T13:28:07Z","section":""},{"_class":"assessment","id":49083854,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have an <em>accounts </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  _id: ObjectId(\"5ca4bbc7a2dd94ee5816239d\"),\n  account_id: 864905,\n  limit: 10000,\n  products: [ 'Commodity', 'InvestmentStock' ]\n},\n{\n  _id: ObjectId(\"5ca4bbc7a2dd94ee5816239e\"),\n  account_id: 299072,\n  limit: 10000,\n  products: [ 'InvestmentFund', 'InvestmentStock' ]\n},\n{\n  _id: ObjectId(\"5ca4bbc7a2dd94ee5816239f\"),\n  account_id: 137994,\n  limit: 10000,\n  products: [ 'CurrencyService', 'InvestmentStock' ]\n}</pre><p><br></p><p>We need to use Aggregation Framework to find the distribution of <em>products </em>field. Sort the result set by decreasing total number of products.</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n    { _id: 'InvestmentStock', total: 1746 },\n    { _id: 'CurrencyService', total: 742 },\n    { _id: 'Brokerage', total: 741 },\n    { _id: 'InvestmentFund', total: 728 },\n    { _id: 'Commodity', total: 720 },\n    { _id: 'Derivatives', total: 706 }\n]</pre><p><br></p><p>Which pipeline should you use?</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>","answers":["<pre class=\"prettyprint linenums\">[{\n    $unwind: {\n        path: \"$products\"\n    }\n}, {\n    $group: {\n        _id: \"$products\",\n        total: {\n            $sum: 1\n        }\n    }\n}, {\n    $sort: {\n        total: -1\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $group: {\n        _id: \"$products\",\n        total: {\n            $sum: 1\n        }\n    }\n}, {\n    $sort: {\n        total: -1\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $unwind: {\n        path: \"products\"\n    }\n}, {\n    $group: {\n        _id: \"products\",\n        total: {\n            $sum: 1\n        }\n    }\n}, {\n    $sort: {\n        total: -1\n    }\n}]</pre>"]},"correct_response":["a"],"updated":"2022-07-16T13:28:39Z","section":""},{"_class":"assessment","id":49083856,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We have an <em>accounts </em>collection with only one document:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: 54657,\n    account_id: 557378,\n    products: [ 'InvestmentStock', 'Commodity', 'CurrencyService' ]\n}</pre><p><br></p><p>We need to use Aggregation Framework to unwind the <em>products </em>Array to obtain new documents with only one product per document (see below).</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n    { _id: 54657, account_id: 557378, products: 'InvestmentStock' },\n    { _id: 54657, account_id: 557378, products: 'Commodity' },\n    { _id: 54657, account_id: 557378, products: 'CurrencyService' }\n]</pre><p><br></p><p>Which pipeline should you use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code><strong>$unwind</strong></code><strong> </strong>deconstructs an array field from the input documents to output a document for <em>each</em> element. Each output document is the input document with the value of the array field replaced by the element.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/</p>","answers":["<pre class=\"prettyprint linenums\">[{\n    $unwind: {\n        path: \"$products\",\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $facet: {\n        path: \"$products\",\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $unset: {\n        path: \"$products\",\n    }\n}]</pre>","<pre class=\"prettyprint linenums\">[{\n    $project: {\n        path: \"$products\",\n    }\n}]</pre>"]},"correct_response":["a"],"updated":"2022-07-16T13:29:44Z","section":""},{"_class":"assessment","id":49083858,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Suppose you want to join two collections in the same database. What aggregation stage do you need to use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code><strong>$lookup</strong></code><strong> </strong>performs a left outer join to an unsharded collection in the <em>same</em> database to filter in documents from the \"joined\" collection for processing. To each input document, the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup\"><code>$lookup</code></a> stage adds a new array field whose elements are the matching documents from the \"joined\" collection. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup\"><code>$lookup</code></a> stage passes these reshaped documents to the next stage.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/</p>","answers":["<pre class=\"prettyprint linenums\">$lookup</pre>","<pre class=\"prettyprint linenums\">$out</pre>","<pre class=\"prettyprint linenums\">$project</pre>","<pre class=\"prettyprint linenums\">$concat</pre>"]},"correct_response":["a"],"updated":"2022-07-16T13:31:26Z","section":""},{"_class":"assessment","id":49083860,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Suppose we have database with the following collections:</p><p><br></p><pre class=\"prettyprint linenums\">db.users.insertMany([\n&nbsp;&nbsp;{&nbsp;_id:&nbsp;1,&nbsp;user_name:&nbsp;'karo243',&nbsp;account_id:&nbsp;1010&nbsp;},&nbsp;\n&nbsp;&nbsp;{&nbsp;_id:&nbsp;2,&nbsp;user_name:&nbsp;'jano23',&nbsp;account_id:&nbsp;3213&nbsp;},&nbsp;\n&nbsp;&nbsp;{&nbsp;_id:&nbsp;3,&nbsp;user_name:&nbsp;'fac_data',&nbsp;account_id:&nbsp;4336&nbsp;}\n])</pre><pre class=\"prettyprint linenums\">db.accounts.insertMany([\n&nbsp;&nbsp;{&nbsp;account_id:&nbsp;1010,&nbsp;type:&nbsp;'investment',&nbsp;limit:&nbsp;1000000&nbsp;},&nbsp;\n&nbsp;&nbsp;{&nbsp;account_id:&nbsp;4336,&nbsp;type:&nbsp;'derivatives',&nbsp;limit:&nbsp;100000&nbsp;}\n])</pre><p><br></p><p>We want to perform so-called left join. To the <em>users </em>collection join account details from <em>accounts </em>collection based on <em>account_id </em>field. See below.</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n  {\n    _id: 1,\n    user_name: 'karo243',\n    account_id: 1010,\n    account_details: [\n      {\n        _id: ObjectId(\"61af47c6e29861661d063714\"),\n        account_id: 1010,\n        type: 'investment',\n        limit: 1000000\n      }\n    ]\n  },\n  {\n    _id: 2,\n    user_name: 'jano23',\n    account_id: 3213,\n    account_details: []\n  },\n  {\n    _id: 3,\n    user_name: 'fac_data',\n    account_id: 4336,\n    account_details: [\n      {\n        _id: ObjectId(\"61af47c6e29861661d063715\"),\n        account_id: 4336,\n        type: 'derivatives',\n        limit: 100000\n      }\n    ]\n  }\n]</pre><p><br></p><p>Which query do you need to use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code><strong>$lookup</strong></code><strong> </strong>performs a left outer join to an unsharded collection in the <em>same</em> database to filter in documents from the \"joined\" collection for processing. To each input document, the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup\"><code>$lookup</code></a> stage adds a new array field whose elements are the matching documents from the \"joined\" collection. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup\"><code>$lookup</code></a> stage passes these reshaped documents to the next stage.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/</p>","answers":["<pre class=\"prettyprint linenums\">db.users.aggregate([\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$lookup:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:&nbsp;'accounts',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField:&nbsp;'account_id',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreignField:&nbsp;'account_id',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as:&nbsp;'account_details'\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.accounts.aggregate([\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$lookup:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:&nbsp;'accounts',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField:&nbsp;'account_id',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreignField:&nbsp;'account_id',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as:&nbsp;'account_details'\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.users.aggregate([\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$lookup:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:&nbsp;'accounts',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField:&nbsp;'account_id',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreignField:&nbsp;'account_id'\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n])</pre>","<pre class=\"prettyprint linenums\">db.users.aggregate([\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$lookup:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:&nbsp;'accounts',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as:&nbsp;'account_details'\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n])</pre>"]},"correct_response":["a"],"updated":"2022-07-16T13:31:58Z","section":""},{"_class":"assessment","id":49083862,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements about <code>$lookup</code> and <code>$graphLookup</code> operators. (select 2)</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>$lookup</code><strong> </strong>performs a left outer join to an unsharded collection in the <em>same</em> database to filter in documents from the \"joined\" collection for processing. To each input document, the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup\"><code>$lookup</code></a> stage adds a new array field whose elements are the matching documents from the \"joined\" collection. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup\"><code>$lookup</code></a> stage passes these reshaped documents to the next stage.</p><p><br></p><p><code>$graphLookup</code> performs a recursive search on a collection, with options for restricting the search by recursion depth and query filter.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/</p>","answers":["<p><code>$graphLookup</code> stage cannot be used without <code>$lookup</code> stage.</p>","<p><code>$lookup</code> stage performs a recursive search on a collection, with options for restricting the search by recursion depth and query filter.</p>","<p><code>$graphLookup</code> stage provides graph-like capabilities.</p>","<p><code>$lookup</code> and <code>$graphLookup</code> can access another collection in the same database.</p>"]},"correct_response":["c","d"],"updated":"2022-07-16T13:36:30Z","section":""},{"_class":"assessment","id":49083864,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select syntax for <code>$graphLookup</code> stage.</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>$graphLookup</code> performs a recursive search on a collection, with options for restricting the search by recursion depth and query filter. Syntax:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;&nbsp;$lookup:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:&nbsp;&lt;collection&nbsp;to&nbsp;join&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField:&nbsp;&lt;field&nbsp;from&nbsp;the&nbsp;input&nbsp;documents&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreignField:&nbsp;&lt;field&nbsp;from&nbsp;the&nbsp;documents&nbsp;of&nbsp;the&nbsp;\"from\"&nbsp;collection&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as:&nbsp;&lt;output&nbsp;array&nbsp;field&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/</p>","answers":["<pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;&nbsp;&nbsp;$graphLookup:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:&nbsp;&lt;collection&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startWith:&nbsp;&lt;expression&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectFromField:&nbsp;&lt;string&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectToField:&nbsp;&lt;string&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as:&nbsp;&lt;string&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDepth:&nbsp;&lt;number&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depthField:&nbsp;&lt;string&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restrictSearchWithMatch:&nbsp;&lt;document&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>","<pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;&nbsp;&nbsp;$graphLookup:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:&nbsp;&lt;collection&nbsp;to&nbsp;join&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField:&nbsp;&lt;field&nbsp;from&nbsp;the&nbsp;input&nbsp;documents&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreignField:&nbsp;&lt;field&nbsp;from&nbsp;the&nbsp;documents&nbsp;of&nbsp;the&nbsp;\"from\"&nbsp;collection&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as:&nbsp;&lt;output&nbsp;array&nbsp;field&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>","<pre class=\"prettyprint linenums\">{&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;$graphLookup:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;into:&nbsp;&lt;collection&gt;&nbsp;-or-&nbsp;{&nbsp;db:&nbsp;&lt;db&gt;,&nbsp;coll:&nbsp;&lt;collection&gt;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on:&nbsp;&lt;identifier&nbsp;field&gt;&nbsp;-or-&nbsp;[&nbsp;&lt;identifier&nbsp;field1&gt;,&nbsp;...],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let:&nbsp;&lt;variables&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whenMatched:&nbsp;&lt;replace|keepExisting|merge|fail|pipeline&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whenNotMatched:&nbsp;&lt;insert|discard|fail&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>"]},"correct_response":["a"],"updated":"2022-07-16T14:19:00Z","section":""},{"_class":"assessment","id":49083866,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements about auto bucketing feature in Aggregation Framework (<code>$bucketAuto</code> stage). (select 3)</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>$bucketAuto</code> categorizes incoming documents into a specific number of groups, called buckets, based on a specified expression. Bucket boundaries are automatically determined in an attempt to evenly distribute the documents into the specified number of buckets.</p><p><br></p><p>The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/bucketAuto/#mongodb-pipeline-pipe.-bucketAuto\"><code>$bucketAuto</code></a> stage has the following form:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  $bucketAuto: {\n      groupBy: &lt;expression&gt;,\n      buckets: &lt;number&gt;,\n      output: {\n         &lt;output1&gt;: { &lt;$accumulator expression&gt; },\n         ...\n      }\n      granularity: &lt;string&gt;\n  }\n}</pre><p><br></p><p>The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/bucketAuto/#mongodb-pipeline-pipe.-bucketAuto\"><code>$bucketAuto</code></a> stage has a limit of 100 megabytes of RAM. By default, if the stage exceeds this limit, <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/bucketAuto/#mongodb-pipeline-pipe.-bucketAuto\"><code>$bucketAuto</code></a> returns an error. To allow more space for stage processing, use the allowDiskUse option to enable aggregation pipeline stages to write data to temporary files.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/bucketAuto/</p>","answers":["<p>This stage distributes documents evenly across predefined number of buckets.</p>","<p>The <code>granularity</code> option allows us to specify preferred bucket boundaries.</p>","<p>The syntax for this stage is as follows:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    $bucketAuto: {\n        groupBy: &lt;expression&gt;,\n        buckets: &lt;number&gt;,\n        output: {\n            &lt;output1&gt;: { &lt;$accumulator expression&gt; },\n            ...\n        }\n        granularity: &lt;string&gt;\n    }\n}</pre>","<p>The <code>$bucketAuto</code> stage has a limit of 500 megabytes of RAM.</p>"]},"correct_response":["a","b","c"],"updated":"2022-07-16T14:21:49Z","section":""},{"_class":"assessment","id":49083868,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements about the <code>$facet</code> stage. (select 2)</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>$facet</code> processes multiple aggregation pipelines within a single stage on the same set of input documents. Each sub-pipeline has its own field in the output document where its results are stored as an array of documents.</p><p>The <code>$facet</code> stage allows you to create multi-faceted aggregations which characterize data across multiple dimensions, or facets, within a single aggregation stage. Multi-faceted aggregations provide multiple filters and categorizations to guide data browsing and analysis.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/facet/</p>","answers":["<p>The output of the <code>$facet</code> stage is subject to the 16 MB document size limit. If the results of the <code>$facet</code> stage exceed this limit, the aggregation produces an error.</p>","<p>The output of the <code>$facet</code> stage is subject to the 32 MB document size limit. If the results of the <code>$facet</code> stage exceed this limit, the aggregation produces an error.</p>","<p>The <code>$facet</code> stage processes multiple aggregation pipelines within a single stage on the same set of input documents.</p>"]},"correct_response":["a","c"],"updated":"2022-07-16T14:26:00Z","section":""},{"_class":"assessment","id":49083870,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements about the <code>$merge</code> stage. (select 3)</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>$merge</code> writes the results of the aggregation pipeline to a specified collection. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/#mongodb-pipeline-pipe.-merge\"><code>$merge</code></a> operator must be the <strong>last</strong> stage in the pipeline.</p><p>If the <code>_id</code> field is not present in a document from the aggregation pipeline results, the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/#mongodb-pipeline-pipe.-merge\"><code>$merge</code></a> stage generates it automatically.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/merge/</p>","answers":["<p><code>$merge</code> stage allows us to output the documents to a collection in the same or different database.</p>","<p><code>$merge</code> stage allows us to output the documents to a sharded collection.</p>","<p><code>$merge</code> stage must be the last in the pipeline.</p>","<p>If the <code>_id</code> field is not present in a document from the aggregation pipeline results, the <code>$merge</code> stage doesn't generate it automatically.</p>"]},"correct_response":["a","b","c"],"updated":"2022-07-16T14:32:03Z","section":""},{"_class":"assessment","id":49083872,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements about the Aggregation Framework. (select 2)</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p>Aggregation operations process multiple documents and return computed results. You can use aggregation operations to:</p><ul><li><p>Group values from multiple documents together.</p></li><li><p>Perform operations on the grouped data to return a single result.</p></li><li><p>Analyze data changes over time.</p></li></ul><p>To perform aggregation operations, you can use:</p><ul><li><p>Aggregation pipelines, which are the preferred method for performing aggregations.</p></li><li><p>Single purpose aggregation methods, which are simple but lack the capabilities of an aggregation pipeline.</p></li></ul><p><br></p><p>https://docs.mongodb.com/manual/aggregation/</p>","answers":["<p>The Aggregation Framework will automatically reorder stages in a certain conditions (for optimization).</p>","<p>The query in a <code>$match</code> stage can not be entirely covered by an index.</p>","<p>An aggregation pipeline consists of one or more stages that process documents.</p>","<p>An aggregation pipeline cannot return results for groups of documents. For example, return the total, average, maximum, and minimum values.</p>"]},"correct_response":["a","c"],"updated":"2022-07-16T15:15:38Z","section":""},{"_class":"assessment","id":49083874,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>A collection called <em>players </em>contains the following documents:</p><p><br></p><pre class=\"prettyprint linenums\">[\n  { _id: 1, user: 'Tom', scores: [ 23, 56, 3, 52, 62 ], bonus: 5 },\n  { _id: 2, user: 'Jane', scores: [ 42, 50, 10 ], bonus: 3 }\n]</pre><p><br></p><p>You want to add additional fields to each document:</p><p>-&gt; <em>total_score </em>(sum of the <em>scores </em>Array)</p><p>-&gt; <em>avg_score </em>(average score in <em>scores </em>Array)</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n  {\n    _id: 1,\n    user: 'Tom',\n    scores: [ 23, 56, 3, 52, 62 ],\n    bonus: 5,\n    total_score: 196,\n    avg_score: 39.2\n  },\n  {\n    _id: 2,\n    user: 'Jane',\n    scores: [ 42, 50, 10 ],\n    bonus: 3,\n    total_score: 102,\n    avg_score: 34\n  }\n]</pre><p><br></p><p>Which query do you need to use?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p><code>$addField</code> adds new fields to documents. <code>$addFields</code> outputs documents that contain all existing fields from the input documents and newly added fields.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p><p>https://www.mongodb.com/docs/manual/reference/operator/aggregation/addFields/</p>","answers":["<pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$addFields:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre>","<pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre>","<pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$addFields:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre>","<pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre>"]},"correct_response":["a"],"updated":"2022-07-16T15:18:00Z","section":""},{"_class":"assessment","id":49083876,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>A collection called <em>players </em>contains the following documents:</p><p><br></p><pre class=\"prettyprint linenums\">[\n  { _id: 1, user: 'Tom', scores: [ 23, 56, 3, 52, 62 ], bonus: 5 },\n  { _id: 2, user: 'Jane', scores: [ 42, 50, 10 ], bonus: 3 }\n]</pre><p><br></p><p>You want to add additional fields to each document:</p><p>-&gt; <em>total_score </em>(sum of the <em>scores </em>Array)</p><p>-&gt; <em>avg_score </em>(average score in <em>scores </em>Array)</p><p>-&gt; <em>total_score_with_bonus </em>(<em>total_score </em>+&nbsp;<em>bonus</em>)</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n  {\n    _id: 1,\n    user: 'Tom',\n    scores: [ 23, 56, 3, 52, 62 ],\n    bonus: 5,\n    total_score: 196,\n    avg_score: 39.2,\n    total_score_with_bonus: 201\n  },\n  {\n    _id: 2,\n    user: 'Jane',\n    scores: [ 42, 50, 10 ],\n    bonus: 3,\n    total_score: 102,\n    avg_score: 34,\n    total_score_with_bonus: 105\n  }\n]</pre><p><br></p><p>Which query do you need to use?</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p><code>$addField</code> adds new fields to documents. <code>$addFields</code> outputs documents that contain all existing fields from the input documents and newly added fields.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p><p>https://www.mongodb.com/docs/manual/reference/operator/aggregation/addFields/</p>","answers":["<pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$addFields:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$addFields:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score_with_bonus:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;['$total_score',&nbsp;'$bonus']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre>","<pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$addFields:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score_with_bonus:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;['$total_score',&nbsp;'$bonus']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre>","<pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score_with_bonus:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;['$total_score',&nbsp;'$bonus']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre>"]},"correct_response":["a"],"updated":"2022-07-16T15:18:51Z","section":""},{"_class":"assessment","id":49083878,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>A collection called <em>players </em>contains documents with the following structure:</p><p><br></p><pre class=\"prettyprint linenums\">{ _id: 1, user: 'Tom', scores: [ 23, 56, 3, 52, 62 ], bonus: 5 }\n{ _id: 2, user: 'Jane', scores: [ 42, 50, 10 ], bonus: 3 }</pre><p><br></p><p>You have the following query:</p><p><br></p><pre class=\"prettyprint linenums\">db.players.aggregate([{\n&nbsp;&nbsp;&nbsp;&nbsp;$addFields:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sum:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avg_score:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$avg:&nbsp;'$scores'\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$addFields:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_score_with_bonus:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$add:&nbsp;['$total_score',&nbsp;'$bonus']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$match:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bonus:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$gt:&nbsp;4\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}])</pre><p><br></p><p>How can you optimize this query?</p>","relatedLectureIds":"","feedbacks":["","",""],"explanation":"<p><code>$match</code> filters the documents to pass only the documents that match the specified condition(s) to the next pipeline stage. Place the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> as early in the aggregation pipeline as possible. Because <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> limits the total number of documents in the aggregation pipeline, earlier <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> operations minimize the amount of processing down the pipe.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/match/</p><p>https://docs.mongodb.com/manual/core/aggregation-pipeline-optimization/</p>","answers":["<p>Moving the <code>$match</code> stage to the beginning of the pipeline.</p><p><br></p><pre class=\"prettyprint linenums\">[{\n    $match: {\n        bonus: {\n            $gt: 4\n        }\n    }\n}, {\n    $addFields: {\n        total_score: {\n            $sum: '$scores'\n        },\n        avg_score: {\n            $avg: '$scores'\n        }\n    }\n}, {\n    $addFields: {\n        total_score_with_bonus: {\n            $add: ['$total_score', '$bonus']\n        }\n    }\n}]</pre>","<p>Moving the <code>$match</code> stage to the second stage of this pipeline.</p><p><br></p><pre class=\"prettyprint linenums\">[{\n    $addFields: {\n        total_score: {\n            $sum: '$scores'\n        },\n        avg_score: {\n            $avg: '$scores'\n        }\n    }\n}, {\n    $match: {\n        bonus: {\n            $gt: 4\n        }\n    }\n}, {\n    $addFields: {\n        total_score_with_bonus: {\n            $add: ['$total_score', '$bonus']\n        }\n    }\n}]</pre>","<p>This query cannot be optimized.</p>"]},"correct_response":["a"],"updated":"2022-07-16T15:20:24Z","section":""},{"_class":"assessment","id":49083880,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Suppose you have a <em>developers </em>collection with only two documents:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;_id:&nbsp;1,\n&nbsp;&nbsp;lname:&nbsp;'Smith',\n&nbsp;&nbsp;tech_stack:&nbsp;[&nbsp;'sql',&nbsp;'git',&nbsp;'python',&nbsp;'django'&nbsp;],\n&nbsp;&nbsp;fname:&nbsp;'Bob'\n},\n{\n&nbsp;&nbsp;_id:&nbsp;2,\n&nbsp;&nbsp;fname:&nbsp;'Michael',\n&nbsp;&nbsp;lname:&nbsp;'Doe',\n&nbsp;&nbsp;tech_stack:&nbsp;[&nbsp;'git',&nbsp;'python',&nbsp;'sqlite',&nbsp;'linux',&nbsp;'flask'&nbsp;]\n}</pre><p><br></p><p>Using Aggregation&nbsp;Framework you run the following stage:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    $unwind: {\n        path: '$tech_stack'\n    }\n}</pre><p><br></p><p>How many documents will you have in the pipeline after the <code>$unwind</code> stage?</p>","relatedLectureIds":"","feedbacks":["","","","",""],"explanation":"<p><code>$unwind</code> deconstructs an array field from the input documents to output a document for <em>each</em> element. Each output document is the input document with the value of the array field replaced by the element.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/</p>","answers":["<p>9</p>","<p>2</p>","<p>4</p>","<p>5</p>","<p>7</p>"]},"correct_response":["a"],"updated":"2022-07-16T17:46:25Z","section":""},{"_class":"assessment","id":49083882,"assessment_type":"multi-select","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Select all true statements regarding to <code>$match</code> stage in Aggregation Framework. (select 2)</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>$match</code> filters the documents to pass only the documents that match the specified condition(s) to the next pipeline stage. Place the <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> as early in the aggregation pipeline as possible. Because <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> limits the total number of documents in the aggregation pipeline, earlier <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match\"><code>$match</code></a> operations minimize the amount of processing down the pipe.&nbsp; </p><p>To use <code>$text</code> in the <code>$match</code> stage, the <code>$match</code> stage has to be the <strong>first </strong>stage of the pipeline.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/match/</p>","answers":["<p>We should use <code>$match</code> stage as early as possible in the aggregation pipeline.</p>","<p>It can only be used once in the aggregation pipeline.</p>","<p>It has a syntax similar to <code>find()</code> method.</p>","<p>To use <code>$text</code> in the <code>$match</code> stage, the <code>$match</code> stage has to be the last stage of the pipeline.</p>"]},"correct_response":["a","c"],"updated":"2022-07-16T17:49:26Z","section":""},{"_class":"assessment","id":49083884,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Which of the following stages do you need to use to randomly select 10 documents from a specific collection?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>$sample</code> randomly selects the specified number of documents from the input documents. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/sample/#mongodb-pipeline-pipe.-sample\"><code>$sample</code></a> stage has the following syntax:</p><p><br></p><pre class=\"prettyprint linenums\">{ $sample: { size: &lt;positive integer N&gt; } }</pre><p><br></p><p><code>N</code> is the number of documents to randomly select.</p><p><br></p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/sample/</p>","answers":["<pre class=\"prettyprint linenums\">{ $sample: { size: 10 } }</pre>","<pre class=\"prettyprint linenums\">{ $sample: { get: 10 } }</pre>","<pre class=\"prettyprint linenums\">{ $rand: { size: 10 } }</pre>","<pre class=\"prettyprint linenums\">{ $sampleRate: { size: 10 } }</pre>"]},"correct_response":["a"],"updated":"2022-07-17T06:07:44Z","section":""},{"_class":"assessment","id":49083886,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Suppose you have an <em>accounts </em>collection in your database. Only the following documents are stored in this collection:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"61af47c6e29861661d063714\"),\n&nbsp;&nbsp;account_id:&nbsp;1010,\n&nbsp;&nbsp;type:&nbsp;'investment',\n&nbsp;&nbsp;limit:&nbsp;2000000\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"61af47c6e29861661d063715\"),\n&nbsp;&nbsp;account_id:&nbsp;4336,\n&nbsp;&nbsp;type:&nbsp;'derivatives',\n&nbsp;&nbsp;limit:&nbsp;100000\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"61af47c6e29861661d063716\"),\n&nbsp;&nbsp;account_id:&nbsp;4336,\n&nbsp;&nbsp;type:&nbsp;'commodity',\n&nbsp;&nbsp;limit:&nbsp;1000\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"61af47c6e29861661d067825\"),\n&nbsp;&nbsp;account_id:&nbsp;7355,\n&nbsp;&nbsp;type:&nbsp;'commodity',\n&nbsp;&nbsp;limit:&nbsp;500000\n},\n{\n&nbsp;&nbsp;_id:&nbsp;ObjectId(\"61b1bde1ceb6f770f56b0cd9\"),\n&nbsp;&nbsp;account_id:&nbsp;4915,\n&nbsp;&nbsp;type:&nbsp;'investment',\n&nbsp;&nbsp;limit:&nbsp;2000000\n}</pre><p><br></p><p>How many documents will be returned in response to the following aggregation pipeline?</p><p><br></p><pre class=\"prettyprint linenums\">[{ $group: {\n  _id: \"$type\",\n  number_of_accounts: {\n    $sum: 1\n  }\n}}, { $match: {\n  number_of_accounts: { $gt: 1 }\n}}]</pre>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group\"><code>$group</code></a> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  $group:\n    {\n      _id: &lt;expression&gt;, // Group key\n      &lt;field1&gt;: { &lt;accumulator1&gt; : &lt;expression1&gt; },\n      ...\n    }\n }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/group/</p>","answers":["<p>2</p>","<p>0</p>","<p>1</p>","<p>3</p>"]},"correct_response":["a"],"updated":"2022-07-17T06:09:00Z","section":""},{"_class":"assessment","id":49083888,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Suppose you have a <em>companies </em>collection in your database. Only the following documents are stored in this collection:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da4\"),\n  name: 'Powerset',\n  category_code: 'search',\n  founded_year: 2006\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da5\"),\n  name: 'Technorati',\n  category_code: 'advertising',\n  founded_year: 2002\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da7\"),\n  name: 'AddThis',\n  category_code: 'advertising',\n  founded_year: 2004\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da8\"),\n  name: 'OpenX',\n  category_code: 'advertising',\n  founded_year: 2008\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297daa\"),\n  name: 'Sparter',\n  category_code: 'games_video',\n  founded_year: 2007\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297dac\"),\n  name: 'Veoh',\n  category_code: 'games_video',\n  founded_year: 2004\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297dae\"),\n  name: 'Thoof',\n  category_code: 'web',\n  founded_year: 2006\n}</pre><p><br></p><p>How many documents will be returned in response to the following aggregation pipeline?</p><p><br></p><pre class=\"prettyprint linenums\">[{ $group: {\n  _id: '$category_code',\n  number_of_companies: {\n    $sum: 1\n  }\n}}, { $sort: {\n  number_of_companies: -1\n}}, { $limit: 3 }]</pre>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group\"><code>$group</code></a> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  $group:\n    {\n      _id: &lt;expression&gt;, // Group key\n      &lt;field1&gt;: { &lt;accumulator1&gt; : &lt;expression1&gt; },\n      ...\n    }\n }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/group/</p>","answers":["<p>3</p>","<p>4</p>","<p>0</p>","<p>2</p>"]},"correct_response":["a"],"updated":"2022-07-17T06:09:36Z","section":""},{"_class":"assessment","id":49083890,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>Suppose you have a <em>companies </em>collection in your database. Only the following documents are stored in this collection:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da4\"),\n  name: 'Powerset',\n  category_code: 'search',\n  founded_year: 2006\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da5\"),\n  name: 'Technorati',\n  category_code: 'advertising',\n  founded_year: 2002\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da7\"),\n  name: 'AddThis',\n  category_code: 'advertising',\n  founded_year: 2004\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297da8\"),\n  name: 'OpenX',\n  category_code: 'advertising',\n  founded_year: 2008\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297daa\"),\n  name: 'Sparter',\n  category_code: 'games_video',\n  founded_year: 2007\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297dac\"),\n  name: 'Veoh',\n  category_code: 'games_video',\n  founded_year: 2004\n},\n{\n  _id: ObjectId(\"52cdef7c4bab8bd675297dae\"),\n  name: 'Thoof',\n  category_code: 'web',\n  founded_year: 2006\n}</pre><p><br></p><p>What is the default sort order in the result set returned in response to the following query?</p><p><br></p><pre class=\"prettyprint linenums\">db.companies.aggregate( [ { \"$sortByCount\": \"$category_code\" } ] )</pre>","relatedLectureIds":"","feedbacks":["",""],"explanation":"<p><code>$sortByCount</code> groups incoming documents based on the value of a specified expression, then computes the count of documents in each distinct group. Each output document contains two fields: an <code>_id</code> field containing the distinct grouping value, and a <code>count</code> field containing the number of documents belonging to that grouping or category. The documents are sorted by <code>count</code> in <strong>descending </strong>order. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortByCount/#mongodb-pipeline-pipe.-sortByCount\"><code>$sortByCount</code></a> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{ $sortByCount:  &lt;expression&gt; }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/</p>","answers":["<p>descending</p>","<p>ascending</p>"]},"correct_response":["a"],"updated":"2022-07-17T06:11:40Z","section":""},{"_class":"assessment","id":49083892,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>The <code>$sortByCount</code> stage is equivalent to:</p>","relatedLectureIds":"","feedbacks":["","","","",""],"explanation":"<p><code>$sortByCount</code> groups incoming documents based on the value of a specified expression, then computes the count of documents in each distinct group. Each output document contains two fields: an <code>_id</code> field containing the distinct grouping value, and a <code>count</code> field containing the number of documents belonging to that grouping or category. The documents are sorted by <code>count</code> in <strong>descending </strong>order. The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortByCount/#mongodb-pipeline-pipe.-sortByCount\"><code>$sortByCount</code></a> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{ $sortByCount:  &lt;expression&gt; }</pre><p><br></p><p>The <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortByCount/#mongodb-pipeline-pipe.-sortByCount\"><code>$sortByCount</code></a> stage is equivalent to the following <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group\"><code>$group</code></a> + <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/sort/#mongodb-pipeline-pipe.-sort\"><code>$sort</code></a> sequence:</p><p><br></p><pre class=\"prettyprint linenums\">{ $group: { _id: &lt;expression&gt;, count: { $sum: 1 } } },\n{ $sort: { count: -1 } }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/</p>","answers":["<p><code>$group</code> + <code>$sort</code></p>","<p><code>$match</code> + <code>$sort</code></p>","<p><code>$text</code> + <code>$search</code> + <code>$sort</code></p>","<p><code>$count</code> + <code>$sort</code></p>","<p><code>$sort</code> + <code>$count</code></p>"]},"correct_response":["a"],"updated":"2022-07-17T06:12:43Z","section":""},{"_class":"assessment","id":49083894,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>We can use REGEX in our queries in MongoDB - JavaScript regular expression syntax.</p>","relatedLectureIds":"","feedbacks":["",""],"explanation":"<p><code>$regex</code> provides regular expression capabilities for pattern matching <em>strings</em> in queries. To use <a href=\"https://www.mongodb.com/docs/manual/reference/operator/query/regex/#mongodb-query-op.-regex\"><code>$regex</code></a>, use one of the following syntaxes:</p><p><br></p><pre class=\"prettyprint linenums\">{ &lt;field&gt;: { $regex: /pattern/, $options: '&lt;options&gt;' } }\n{ &lt;field&gt;: { $regex: 'pattern', $options: '&lt;options&gt;' } }\n{ &lt;field&gt;: { $regex: /pattern/&lt;options&gt; } }</pre><p><br></p><p>In MongoDB, you can also use regular expression objects (i.e. <code>/pattern/</code>) to specify regular expressions:</p><p><br></p><pre class=\"prettyprint linenums\">{ &lt;field&gt;: /pattern/&lt;options&gt; }</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/query/regex/</p>","answers":["<p>True</p>","<p>False</p>"]},"correct_response":["a"],"updated":"2022-07-17T06:14:18Z","section":""},{"_class":"assessment","id":49083896,"assessment_type":"multiple-choice","created":"2022-07-16T11:37:52Z","prompt":{"question":"<p>How to correctly create a date (new object of <em>Date </em>type) in MongoDB?</p>","relatedLectureIds":"","feedbacks":["","","",""],"explanation":"<p><code>Date()</code> returns a date either as a string or as a Date object.</p><ul><li><p><code>Date()</code> returns the current date as a string in <a href=\"https://www.mongodb.com/docs/mongodb-shell/#mongodb-binary-bin.mongosh\"><code>mongosh</code></a>.</p></li><li><p><code>new Date()</code> returns the current date as a Date object. <a href=\"https://www.mongodb.com/docs/mongodb-shell/#mongodb-binary-bin.mongosh\"><code>mongosh</code></a> wraps the Date object with the <code>ISODate</code> helper. The <code>ISODate</code> is in UTC.</p></li></ul><p><br></p><p>https://docs.mongodb.com/manual/reference/method/Date/</p>","answers":["<pre class=\"prettyprint linenums\">new Date()</pre>","<pre class=\"prettyprint linenums\">Date()</pre>","<pre class=\"prettyprint linenums\">db.Date()</pre>","<pre class=\"prettyprint linenums\">object Date()</pre>"]},"correct_response":["a"],"updated":"2022-07-17T06:17:01Z","section":""}]}