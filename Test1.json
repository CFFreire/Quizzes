{
    "count": 60,
    "next": null,
    "previous": null,
    "results": [
        {
            "_class": "assessment",
            "id": 56168572,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>How does the document relate to the collection in MongoDB? (select 2)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>MongoDB stores data records as documents (specifically BSON documents) which are gathered together in collections. A database stores one or more collections of documents.</p><p><br></p><p>https://docs.mongodb.com/manual/core/databases-and-collections/</p>",
                "answers": [
                    "<p>Collections consists of one or many documents.</p>",
                    "<p>Collections are tables of documents.</p>",
                    "<p>Documents consist of collections.</p>",
                    "<p>Documents are organized into collections.</p>"
                ]
            },
            "correct_response": [
                "a",
                "d"
            ],
            "updated": "2023-02-09T14:24:21Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168574,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Select all true statement regarding to the MongoDB (BSON, JSON). (select 3)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>JSON, or JavaScript Object Notation, is the wildly popular standard for data interchange on the web, on which BSON (Binary JSON) is based. JavaScript Object Notation, more commonly known as JSON, was defined as part of the JavaScript language. <a href=\"http://bsonspec.org/\">BSON</a> simply stands for “Binary JSON,” and that’s exactly what it was invented to be. BSON’s binary structure encodes type and length information, which allows it to be parsed much more quickly.</p><p><br></p><p>https://www.mongodb.com/json-and-bson</p>",
                "answers": [
                    "<p>MongoDB stores data in BSON, and we can view it in JSON.</p>",
                    "<p>MongoDB stores data in JSON, and we can view it in BSON.</p>",
                    "<p>BSON is faster to parse and lighter to store than JSON.</p>",
                    "<p>BSON supports more data types than JSON.</p>",
                    "<p>BSON supports as many data types as JSON.</p>"
                ]
            },
            "correct_response": [
                "a",
                "c",
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168576,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Select all true statements about the insert operation. (select 2)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>The <code>insert()</code> method has the following syntax:</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.insert(\n   &lt;document or array of documents&gt;,\n   {\n     writeConcern: &lt;document&gt;,\n     ordered: &lt;boolean&gt;\n   }\n)</pre><p><br></p><p>Inserts a document or documents into a collection. If the collection does not exist, then the <code>insert()</code> method will create the collection. If the document does not specify an <code>_id</code> field, then MongoDB will add the <code>_id</code> field and assign a unique <code>ObjectId()</code> for the document before inserting. If the document contains an <code>_id</code> field, the <code>_id</code> value must be unique within the collection to avoid duplicate key error.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.insert/</p>",
                "answers": [
                    "<p>MongoDB will automatically add an <code>_id</code> field when inserting document without specified <code>_id</code> field into a collection.</p>",
                    "<p>If you insert a document with no <code>_id</code> value specified, it will result in a write error.</p>",
                    "<p>If you insert document with a <code>_id</code> field value that already exists, an error will be raised.</p>",
                    "<p>If the collection does not exist, then the <code>insert()</code> method will not create the collection and an error will be raised.</p>"
                ]
            },
            "correct_response": [
                "a",
                "c"
            ],
            "updated": "2023-02-09T14:31:31Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168578,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which of the following commands will delete a collection named <code>restaurants</code>?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.collection.drop()</code> - removes a collection or view from the database. The method also removes any indexes associated with the dropped collection. The method provides a wrapper around the <code>drop</code> command.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.drop/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.restaurants.drop()</pre>",
                    "<pre class=\"prettyprint linenums\">db.restaurants.dropCollection()</pre>",
                    "<pre class=\"prettyprint linenums\">db.restaurants.delete()</pre>",
                    "<pre class=\"prettyprint linenums\">db.restaurants.remove()</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168580,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which cursor method should you use to specify the maximum number of documents returned?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Use the <code>limit()</code> method on a cursor to specify the maximum number of documents the cursor will return. <code>limit()</code> is analogous to the <code>LIMIT</code> statement in a SQL database.</p><p><br></p><p>https://www.mongodb.com/docs/manual/reference/method/cursor.limit/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">cursor.limit()</pre>",
                    "<pre class=\"prettyprint linenums\">cursor.count()</pre>",
                    "<pre class=\"prettyprint linenums\">cursor.hint()</pre>",
                    "<pre class=\"prettyprint linenums\">cursor.map()</pre>",
                    "<pre class=\"prettyprint linenums\">cursor.skip()</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:32:21Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168582,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which cursor method should you use to get information about the query plan?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>cursor.explain(verbosity)</code> provides information on the query plan for the <code>db.collection.find()</code> method.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/cursor.explain/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">cursor.explain()</pre>",
                    "<pre class=\"prettyprint linenums\">cursor.hint()</pre>",
                    "<pre class=\"prettyprint linenums\">cursor.map()</pre>",
                    "<pre class=\"prettyprint linenums\">cursor.size()</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:30:59Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168584,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>There is a <code>gamers</code> collection in your database with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{&nbsp;_id:&nbsp;1,&nbsp;level:&nbsp;15,&nbsp;is_active:&nbsp;true&nbsp;},\n{&nbsp;_id:&nbsp;2,&nbsp;level:&nbsp;14,&nbsp;is_active:&nbsp;true&nbsp;},\n{&nbsp;_id:&nbsp;3,&nbsp;level:&nbsp;7,&nbsp;is_active:&nbsp;false&nbsp;}</pre><p><br></p><p>How do you update the value of the <code>level</code><em> </em>field to 20 for a player with an <code>id = 2</code>?</p><p><br></p><p><strong>Expected result:</strong></p><p><br></p><pre class=\"prettyprint linenums\">{&nbsp;_id:&nbsp;1,&nbsp;level:&nbsp;15,&nbsp;is_active:&nbsp;true&nbsp;},\n{&nbsp;_id:&nbsp;2,&nbsp;level:&nbsp;20,&nbsp;is_active:&nbsp;true&nbsp;},\n{&nbsp;_id:&nbsp;3,&nbsp;level:&nbsp;7,&nbsp;is_active:&nbsp;false&nbsp;}</pre><p><br></p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>The <code>$set</code> operator replaces the value of a field with the specified value.</p><p>The <code>$set</code> operator expression has the following form:</p><p><br></p><pre class=\"prettyprint linenums\">{ $set: { &lt;field1&gt;: &lt;value1&gt;, ... } }</pre><p><br></p><p>To specify a <code>&lt;field&gt;</code> in an embedded document or in an array, use dot notation.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/update/set/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.gamers.update( { _id: 2 }, { $set: { level: 20 } } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.gamers.update( { _id: 2 }, { level: 20 } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.gamers.update( { _id: 2 }, { $inc: { level: 20 } } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.gamers.update( { _id: 2 }, { $unset: { level: 20 } } )</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168586,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Select all valid BSON types in MongoDB. (select 3)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>https://docs.mongodb.com/manual/reference/bson-types/</p>",
                "answers": [
                    "<p>Array</p>",
                    "<p>ObjectId</p>",
                    "<p>String</p>",
                    "<p>Dictionary</p>",
                    "<p>Stack</p>"
                ]
            },
            "correct_response": [
                "a",
                "b",
                "c"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168588,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Why is MongoDB using BSON instead of JSON to store data? (select 3)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>JSON, or JavaScript Object Notation, is the wildly popular standard for data interchange on the web, on which BSON (Binary JSON) is based. BSON simply stands for “Binary JSON,” and that’s exactly what it was invented to be. BSON’s binary structure encodes type and length information, which allows it to be parsed much more quickly. Since its initial formulation, BSON has been extended to add some optional non-JSON-native data types, like dates and binary data, without which MongoDB would have been missing some valuable support. MongoDB stores data in BSON format both internally, and over the network.</p><p><br></p><p>https://www.mongodb.com/json-and-bson</p>",
                "answers": [
                    "<p>BSON supports more data types than JSON.</p>",
                    "<p>BSON contains metadata to describe a document/object.</p>",
                    "<p>BSON format is human readable.</p>",
                    "<p>BSON simply means 'Binary JSON'.</p>",
                    "<p>BSON simply means 'Better JSON'.</p>"
                ]
            },
            "correct_response": [
                "a",
                "b",
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168590,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>You have a <code>developers</code><em> </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;_id:&nbsp;1,\n&nbsp;&nbsp;fname:&nbsp;'John',\n&nbsp;&nbsp;lname:&nbsp;'Smith',\n&nbsp;&nbsp;tech_stack:&nbsp;['sql',&nbsp;'git',&nbsp;'python',&nbsp;'linux',&nbsp;'django',&nbsp;'aws']\n},\n{\n&nbsp;&nbsp;_id:&nbsp;2,\n&nbsp;&nbsp;fname:&nbsp;'Michael',\n&nbsp;&nbsp;lname:&nbsp;'Doe',\n&nbsp;&nbsp;tech_stack:&nbsp;[&nbsp;'git',&nbsp;'python',&nbsp;'sqlite',&nbsp;'linux',&nbsp;'flask'&nbsp;]\n}</pre><p><br></p><p>Which of the following queries will return only the first three elements of the array in the <code>tech_stack</code> field?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>The <code>$slice</code> projection operator specifies the number of elements in an array to return in the query result. The <code>$slice</code> has one of the following syntax forms:</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.find(\n   &lt;query&gt;,\n   { &lt;arrayField&gt;: { $slice: &lt;number&gt; } }\n);</pre><p><br></p><p>or</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.find(\n   &lt;query&gt;,\n   { &lt;arrayField&gt;: { $slice: [ &lt;number&gt;, &lt;number&gt; ] } }\n);</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/update/slice/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.developers.find( {}, { tech_stack: { $slice: [0, 3] } } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.developers.find( {}, { tech_stack: [0, 1, 2] } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.developers.find( {}, { tech_stack: [0, 3] } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.developers.find( { tech_stack: { $slice: [0, 3] } } )</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:30:35Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168592,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Can you perform the following operation?</p><p><br></p><pre class=\"prettyprint linenums\">db.users.insertOne({})</pre><p><br></p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.collection.insertOne()</code> inserts a single document into a collection. The <code>insertOne()</code> method has the following syntax:</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.insertOne(\n   &lt;document&gt;,\n   {\n      writeConcern: &lt;document&gt;\n   }\n)</pre><p><br></p><p>If the document does not specify an _id field, then <code>mongod</code> will add the <code>_id</code> field and assign a unique <code>ObjectId()</code> for the document before inserting.</p><p><br></p><p>https://www.mongodb.com/docs/manual/reference/method/db.collection.insertOne/</p>",
                "answers": [
                    "<p>No, it will throw an error.</p>",
                    "<p>Yes, it will only insert a document with an <code>_id</code> field (auto-generated).</p>",
                    "<p>Yes, it will only insert a document without any fields.</p>",
                    "<p>Yes, it will only insert a document with an <code>_index</code> field (auto-generated).</p>"
                ]
            },
            "correct_response": [
                "b"
            ],
            "updated": "2023-02-09T14:33:07Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168594,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Suppose you have a <code>developers</code> collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;_id:&nbsp;1,\n&nbsp;&nbsp;fname:&nbsp;'Bob',\n&nbsp;&nbsp;lname:&nbsp;'Smith',\n&nbsp;&nbsp;tech_stack:&nbsp;[&nbsp;'git',&nbsp;'c++',&nbsp;'sqlite',&nbsp;'linux'&nbsp;]\n}</pre><p><br></p><p>Select the query that can be executed without errors.</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.collection.updateOne(filter, update, options)</code><strong> </strong>updates a single document within the collection based on the filter. </p><p><br></p><p>You cannot update the <code>_id</code> field, so only <code>db.developers.updateOne( { _id: 1 }, { $set: { fname: 'John' } } )</code> is ok.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.developers.updateOne( { _id: 1 }, { $set: { fname: 'John' } } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.developers.updateOne( { _id: 1 }, { $set: { _id: 3 } } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.developers.updateOne( { _id: 1 }, { $set: { _id: 3, fname: 'Bob' } } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.developers.updateOne( { _id: 1 }, { $unset: { _id: '' } } )</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168596,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>We have an <code>accounts</code><em> </em>collection with only one document:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: 54657,\n    account_id: 557378,\n    products: [ 'InvestmentStock', 'Commodity', 'CurrencyService' ]\n}</pre><p><br></p><p>We need to use Aggregation Framework to unwind the <code>products</code><em> </em>Array to obtain new documents with only one product per document (see below).</p><p><br></p><p><strong>Expected output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">[\n    { _id: 54657, account_id: 557378, products: 'InvestmentStock' },\n    { _id: 54657, account_id: 557378, products: 'Commodity' },\n    { _id: 54657, account_id: 557378, products: 'CurrencyService' }\n]</pre><p><br></p><p>Which pipeline should you use?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code><strong>$unwind</strong></code><strong> </strong>deconstructs an array field from the input documents to output a document for <em>each</em> element. Each output document is the input document with the value of the array field replaced by the element.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">[{\n    $unwind: {\n        path: \"$products\",\n    }\n}]</pre>",
                    "<pre class=\"prettyprint linenums\">[{\n    $facet: {\n        path: \"$products\",\n    }\n}]</pre>",
                    "<pre class=\"prettyprint linenums\">[{\n    $unset: {\n        path: \"$products\",\n    }\n}]</pre>",
                    "<pre class=\"prettyprint linenums\">[{\n    $project: {\n        path: \"$products\",\n    }\n}]</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168598,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Select all true statements regarding to pipelines and the Aggregation Framework. (select 2)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Aggregation operations process multiple documents and return computed results. You can use aggregation operations to:</p><ul><li><p>Group values from multiple documents together.</p></li><li><p>Perform operations on the grouped data to return a single result.</p></li><li><p>Analyze data changes over time.</p></li></ul><p>To perform aggregation operations, you can use:</p><ul><li><p>Aggregation pipelines, which are the preferred method for performing aggregations.</p></li><li><p>Single purpose aggregation methods, which are simple but lack the capabilities of an aggregation pipeline.</p></li></ul><p><br></p><p>An aggregation pipeline consists of one or more stages that process documents:</p><ul><li><p>Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.</p></li><li><p>The documents that are output from a stage are passed to the next stage.</p></li><li><p>An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.</p></li></ul><p><br></p><p>https://docs.mongodb.com/manual/aggregation/</p>",
                "answers": [
                    "<p>An aggregation pipeline consists of one or more stages that process documents.</p>",
                    "<p>Aggregation Framework does not have the group stage for grouping data.</p>",
                    "<p>The aggregation pipeline cannot operate on a sharded collection.</p>",
                    "<p>An aggregation pipeline is an array of stages.</p>"
                ]
            },
            "correct_response": [
                "a",
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168600,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>How can we present the basic syntax for aggregation in MongoDB?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Aggregation operations process multiple documents and return computed results. You can use aggregation operations to:</p><ul><li><p>Group values from multiple documents together.</p></li><li><p>Perform operations on the grouped data to return a single result.</p></li><li><p>Analyze data changes over time.</p></li></ul><p>To perform aggregation operations, you can use:</p><ul><li><p>Aggregation pipelines, which are the preferred method for performing aggregations.</p></li><li><p>Single purpose aggregation methods, which are simple but lack the capabilities of an aggregation pipeline.</p></li></ul><p><br></p><p>An aggregation pipeline consists of one or more stages that process documents:</p><ul><li><p>Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.</p></li><li><p>The documents that are output from a stage are passed to the next stage.</p></li><li><p>An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.</p></li></ul><p><br></p><p>Basic syntax:</p><p><br></p><pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n],&nbsp;{&nbsp;options&nbsp;}&nbsp;)</pre><p><br></p><p>https://docs.mongodb.com/manual/aggregation/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n],&nbsp;{&nbsp;options&nbsp;}&nbsp;)</pre>",
                    "<pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;options&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.myCollection.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;options&nbsp;}\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.myCollection.find([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage1&nbsp;},&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stage2&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;...,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;stageN&nbsp;}\n],&nbsp;{&nbsp;options&nbsp;}&nbsp;)</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168602,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>What is the best practice in using the <code>$match</code> operator? </p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code><strong>$match</strong></code><strong> </strong>filters the documents to pass only the documents that match the specified condition(s) to the next pipeline stage. The <code>$match</code> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{ $match: { &lt;query&gt; } }</pre><p><br></p><p>Place the <code>$match</code> as early in the aggregation pipeline as possible. Because <code>$match</code> limits the total number of documents in the aggregation pipeline, earlier <code>$match</code> operations minimize the amount of processing down the pipe.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/operator/aggregation/match/</p>",
                "answers": [
                    "<p>The earlier in the pipeline, the better. Not only because we will be using expression filters which reduce the number of documents to be processed, but also because we can use indexes.</p>",
                    "<p>The later in the pipeline, the better.</p>",
                    "<p>It doesn't matter when we apply <code>$match</code> stage.</p>",
                    "<p>MongoDB does not have a <code>$match</code> stage.</p>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168634,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>You have to create a simple configuration file for <code>mongod</code> instance. </p><p><br></p><p>Here are the requirements of your <code>mongod</code> instance:</p><p>*&nbsp;run on port 27100</p><p>* authentication is enabled</p><p><br></p><p>Which of the following configuration file meet these requirements?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>net</code> options:</p><p><br></p><pre class=\"prettyprint linenums\">net:\n&nbsp;&nbsp;&nbsp;port:&nbsp;&lt;int&gt;\n&nbsp;&nbsp;&nbsp;bindIp:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;bindIpAll:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;maxIncomingConnections:&nbsp;&lt;int&gt;\n&nbsp;&nbsp;&nbsp;wireObjectCheck:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;ipv6:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;unixDomainSocket:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enabled:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathPrefix:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filePermissions:&nbsp;&lt;int&gt;\n&nbsp;&nbsp;&nbsp;tls:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;certificateSelector:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusterCertificateSelector:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;certificateKeyFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;certificateKeyFilePassword:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusterFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusterPassword:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CAFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusterCAFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CRLFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allowConnectionsWithoutCertificates:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allowInvalidCertificates:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allowInvalidHostnames:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disabledProtocols:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FIPSMode:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logVersions:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;compression:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compressors:&nbsp;&lt;string&gt;</pre><p><br></p><p><code>security</code> options:</p><p><br></p><pre class=\"prettyprint linenums\">security:\n&nbsp;&nbsp;&nbsp;keyFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;clusterAuthMode:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;authorization:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;transitionToAuth:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;javascriptEnabled:&nbsp;&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;redactClientLogData:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;clusterIpSourceAllowlist:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;sasl:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostName:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serviceName:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saslauthdSocketPath:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;enableEncryption:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;encryptionCipherMode:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;encryptionKeyFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;kmip:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyIdentifier:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotateMasterKey:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverName:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clientCertificateFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clientCertificatePassword:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clientCertificateSelector:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverCAFile:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectRetries:&nbsp;&lt;int&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectTimeoutMS:&nbsp;&lt;int&gt;\n&nbsp;&nbsp;&nbsp;ldap:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;servers:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saslMechanisms:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queryUser:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queryPassword:&nbsp;&lt;string&nbsp;|&nbsp;array&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useOSDefaults:&nbsp;&lt;boolean&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transportSecurity:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timeoutMS:&nbsp;&lt;int&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userToDNMapping:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authz:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queryTemplate:&nbsp;&lt;string&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;validateLDAPServerConfig:&nbsp;&lt;boolean&gt;</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/configuration-options/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">net:\n&nbsp;&nbsp;port:&nbsp;27100\nsecurity:\n&nbsp;&nbsp;&nbsp;&nbsp;authorization:&nbsp;enabled</pre>",
                    "<pre class=\"prettyprint linenums\">net:\n&nbsp;&nbsp;port:&nbsp;27100\nsecurity:\n&nbsp;&nbsp;&nbsp;&nbsp;authorization:&nbsp;disabled</pre>",
                    "<pre class=\"prettyprint linenums\">net:\n&nbsp;&nbsp;port:&nbsp;27000\nprocessManagement:\n&nbsp;&nbsp;fork:&nbsp;true</pre>",
                    "<pre class=\"prettyprint linenums\">port:\n&nbsp;&nbsp;net:&nbsp;27100\nsecurity:\n&nbsp;&nbsp;&nbsp;&nbsp;authorization:&nbsp;enabled</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168636,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which of the following methods executes a database command? (Mongo shell)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.runCommand(command)</code> provides a helper to run specified database commands. This is the preferred method to issue database commands, as it provides a consistent interface between the shell and drivers.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.runCommand/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.runCommand({ &lt;command&gt; })</pre>",
                    "<pre class=\"prettyprint linenums\">db.runThisCommand({ &lt;command&gt; })</pre>",
                    "<pre class=\"prettyprint linenums\">db.ommand({ &lt;command&gt; })</pre>",
                    "<pre class=\"prettyprint linenums\">db.execute({ &lt;command&gt; })</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168638,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>You have the following configuration file:</p><p><br></p><pre class=\"prettyprint linenums\">storage:\n  dbPath: /var/mongodb/db\nnet:\n  bindIp: localhost\n  port: 27000\nsecurity:\n  authorization: enabled</pre><p><br></p><p>You have to update this file such that:</p><p>* <code>mongod</code><em> </em>sends logs to <code>/var/mongodb/logs/mongod.log</code></p><p>*&nbsp;<code>mongod</code><em> </em>is forked and run as a daemon</p><p><br></p><p>Select the correct answer.</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>https://docs.mongodb.com/manual/reference/configuration-options/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">storage:\n&nbsp;&nbsp;dbPath:&nbsp;/var/mongodb/db\nnet:\n&nbsp;&nbsp;bindIp:&nbsp;localhost\n&nbsp;&nbsp;port:&nbsp;27000\nsecurity:\n&nbsp;&nbsp;authorization:&nbsp;enabled\nsystemLog:\n&nbsp;&nbsp;destination:&nbsp;file\n&nbsp;&nbsp;path:&nbsp;\"/var/mongodb/logs/mongod.log\"\nprocessManagement:\n&nbsp;&nbsp;fork:&nbsp;true</pre>",
                    "<pre class=\"prettyprint linenums\">storage:\n&nbsp;&nbsp;dbPath:&nbsp;/var/mongodb/db\nnet:\n&nbsp;&nbsp;bindIp:&nbsp;localhost\n&nbsp;&nbsp;port:&nbsp;27000\nsecurity:\n&nbsp;&nbsp;authorization:&nbsp;enabled\nsystemLog:\n&nbsp;&nbsp;destination:&nbsp;file\n&nbsp;&nbsp;path:&nbsp;\"/var/mongodb/logs/mongod.log\"</pre>",
                    "<pre class=\"prettyprint linenums\">storage:\n&nbsp;&nbsp;dbPath:&nbsp;/var/mongodb/db\nnet:\n&nbsp;&nbsp;bindIp:&nbsp;localhost\n&nbsp;&nbsp;port:&nbsp;27000\nsecurity:\n&nbsp;&nbsp;authorization:&nbsp;enabled\nprocessManagement:\n&nbsp;&nbsp;fork:&nbsp;true</pre>",
                    "<pre class=\"prettyprint linenums\">storage:\n  dbPath: /var/mongodb/db\nnet:\n  bindIp: localhost\n  port: 27000\nsecurity:\n  authorization: enabled</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168640,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>How to connect to <code>mongod</code><em> </em>instance and authenticate as root?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>To connect to a MongoDB instance requires authentication:</p><ul><li><p>You can specify the username, authentication database, and optionally the password in the connection string. For example, to connect and authenticate to a remote MongoDB instance as user <code>alice</code>: <br><code>mongo \"mongodb://alice@mongodb0.examples.com:28015/?authSource=admin\"</code></p></li></ul><p><br></p><ul><li><p>You can use the <code>--username &lt;user&gt;</code> and <code>--password</code>, <code>--authenticationDatabase &lt;db&gt;</code> command-line options. For example, to connect and authenticate to a remote MongoDB instance as user <code>alice</code>:<br><code>mongo --username alice --password --authenticationDatabase admin --host mongodb0.examples.com --port 28015</code></p></li></ul><p><br></p><p>https://docs.mongodb.com/v4.4/mongo/#mongodb-instance-with-authentication</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">mongo&nbsp;--username&nbsp;root&nbsp;--password&nbsp;root123&nbsp;--authenticationDatabase&nbsp;admin</pre>",
                    "<pre class=\"prettyprint linenums\">mongo&nbsp;--authenticationDatabase&nbsp;admin</pre>",
                    "<pre class=\"prettyprint linenums\">mongoroot&nbsp;--authenticationDatabase&nbsp;admin</pre>",
                    "<pre class=\"prettyprint linenums\">mongoadmin&nbsp;--username&nbsp;root&nbsp;--password&nbsp;root123</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168642,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>How to display MongoDB configuration file from the command line (Linux)?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>https://docs.mongodb.com/manual/reference/configuration-options/#use-the-configuration-file</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">$&nbsp;cat /etc/mongod.conf</pre>",
                    "<pre class=\"prettyprint linenums\">$&nbsp;cat /var/mongod.conf</pre>",
                    "<pre class=\"prettyprint linenums\">$&nbsp;cat /bin/mongod.conf</pre>",
                    "<pre class=\"prettyprint linenums\">$&nbsp;cat /home/mongod.conf</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168644,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Suppose you are connected to <code>mongod</code><em> </em>instance that is already running on port 27000 as admin user. You have to create a new user for an application that has the <code>readWrite</code><em> </em>role. Use the <code>db.createUser()</code> command to create a user for data analysis.</p><p><br></p><p>The requirements for this user are:</p><p>-&gt;&nbsp;role: <code>read</code><em> </em>on <code>esmartdata</code><em> </em>database</p><p>-&gt; username: <code>dataScientist</code></p><p>-&gt;&nbsp;password: <code>ds123sci456</code></p><p><br></p><p>Which command should you use?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.createUser(user, writeConcern)</code> creates a new user for the database on which the method is run. <code>db.createUser()</code> returns a <em>duplicate user</em> error if the user already exists on the database.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.createUser/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.createUser({\n&nbsp;&nbsp;&nbsp;&nbsp;user:&nbsp;'dataScientist',\n&nbsp;&nbsp;&nbsp;&nbsp;pwd:&nbsp;'ds123sci456',\n&nbsp;&nbsp;&nbsp;&nbsp;roles:&nbsp;[{role:&nbsp;'read',&nbsp;db:&nbsp;'esmartdata'}]\n})</pre>",
                    "<pre class=\"prettyprint linenums\">db.createUser({\n&nbsp;&nbsp;&nbsp;&nbsp;user:&nbsp;'dataScientist',\n&nbsp;&nbsp;&nbsp;&nbsp;pwd:&nbsp;'ds123sci456',\n&nbsp;&nbsp;&nbsp;&nbsp;roles:&nbsp;[{role:&nbsp;'read',&nbsp;db:&nbsp;''}]\n})</pre>",
                    "<pre class=\"prettyprint linenums\">db.createUser({\n&nbsp;&nbsp;&nbsp;&nbsp;user:&nbsp;'dataScientist',\n&nbsp;&nbsp;&nbsp;&nbsp;pwd:&nbsp;'ds123sci456',\n&nbsp;&nbsp;&nbsp;&nbsp;roles:&nbsp;[{role:&nbsp;'write',&nbsp;db:&nbsp;'esmartdata'}]\n})</pre>",
                    "<pre class=\"prettyprint linenums\">db.createUser({\n&nbsp;&nbsp;&nbsp;&nbsp;user:&nbsp;'dataScientist',\n&nbsp;&nbsp;&nbsp;&nbsp;pwd:&nbsp;'ds123sci456',\n&nbsp;&nbsp;&nbsp;&nbsp;roles:&nbsp;[{role:&nbsp;'r',&nbsp;db:&nbsp;'esmartdata'}]\n})</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168646,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which of the following built-in roles provides the greatest cluster management access?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>clusterAdmin</code> provides the greatest cluster-management access. This role combines the privileges granted by the <code>clusterManager</code>, <code>clusterMonitor</code>, and <code>hostManager</code> roles. Additionally, the role provides the <code>dropDatabase</code> action.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/built-in-roles/#mongodb-authrole-clusterAdmin</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">clusterAdmin</pre>",
                    "<pre class=\"prettyprint linenums\">clusterManager</pre>",
                    "<pre class=\"prettyprint linenums\">clusterMonitor</pre>",
                    "<pre class=\"prettyprint linenums\">hostManager</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168648,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Given the following documents in a collection:</p><p><br></p><pre class=\"prettyprint linenums\">{&nbsp;_id:&nbsp;1,&nbsp;n:&nbsp;[1,2,5],&nbsp;p:&nbsp;0.75,&nbsp;c:&nbsp;'Green'&nbsp;},\n{&nbsp;_id:&nbsp;2,&nbsp;n:&nbsp;'Orange',&nbsp;p:&nbsp;'Blue',&nbsp;c:&nbsp;42,&nbsp;q:&nbsp;14&nbsp;},\n{&nbsp;_id:&nbsp;3,&nbsp;n:&nbsp;[1,3,7],&nbsp;p:&nbsp;0.85,&nbsp;c:&nbsp;'Orange'&nbsp;}</pre><p><br></p><p>Which two documents can successfully be added in the same collection? (select 2)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>{ _id: 1, n: [1,2,5], p: 0.75, c: 'Green' }</code> -&gt; Incorrect <code>_id</code> value. Already exists.</p><p><code>{ _id: 2, n: [1,2,5], p: 0.75, c: 'Green' }</code> -&gt; Incorrect <code>_id</code> value. Already exists.</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">{ _id: 1, n: [1,2,5], p: 0.75, c: 'Green' }</pre>",
                    "<pre class=\"prettyprint linenums\">{ _id: 5, n: [1,2,5], p: 0.75, c: 'Green' }</pre>",
                    "<pre class=\"prettyprint linenums\">{ _id: 2, n: [1,2,5], p: 0.75, c: 'Green' }</pre>",
                    "<pre class=\"prettyprint linenums\">{ _id; 6, n: [1,3,7], p: 0.85, c: 'Orange }</pre>"
                ]
            },
            "correct_response": [
                "b",
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168650,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Given the following documents in a collection:</p><p><br></p><pre class=\"prettyprint linenums\">{_id:&nbsp;1,&nbsp;txt:&nbsp;\"apple\"},\n{_id:&nbsp;2,&nbsp;txt:&nbsp;\"apple\"}</pre><p><br></p><p>Which two documents can successfully be added in the same collection? (select 2)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>{_id: 1, txt: \"apple\"}</code> -&gt;&nbsp;Incorrect. Duplicate key error on <code>_id</code>.</p><p><code>{_id: [4], txt: \"apple\"}</code> -&gt;&nbsp;Incorrect. <code>_id</code> must not be an array field.</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">{_id: 0, txt: \"apple\"}</pre>",
                    "<pre class=\"prettyprint linenums\">{_id: 1, txt: \"apple\"}</pre>",
                    "<pre class=\"prettyprint linenums\">{_id: [3], txt: \"apple\"}</pre>",
                    "<pre class=\"prettyprint linenums\">{_id: 3, txt: \"apple\"}</pre>"
                ]
            },
            "correct_response": [
                "a",
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168652,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>An <code>inventory</code> collection consists of 200 documents. What method should be used to get all documents from a cursor using <code>mongosh</code>?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.inventory.find().toArray()</code> -&gt; This method returns an array that contains all documents returned by the cursor.</p><p><br></p><p><code>db.inventory.findOne()</code> -&gt;The <code>findOne()</code> method returns a single document.</p><p><br></p><p><code>db.inventory.find()</code> -&gt; The <code>find()</code> method returns a cursor.</p><p><br></p><p><code>db.inventory.findMany().toArray()</code> -&gt; You cannot convert a collection to an array like this, no such function <code>findMany()</code>.</p>",
                "answers": [
                    "<p><code>db.inventory.find().toArray()</code> </p>",
                    "<p><code>db.inventory.findOne()</code> </p>",
                    "<p><code>db.inventory.find()</code> </p>",
                    "<p><code>db.inventory.findMany().toArray()</code> </p>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168604,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>We have a<em> </em><code>movies</code><em> </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;ObjectId(\"573a1390f29313caabcd60e4\"),\n&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;'The&nbsp;Immigrant',\n&nbsp;&nbsp;&nbsp;&nbsp;released:&nbsp;ISODate(\"1917-06-17T00:00:00.000Z\"),\n&nbsp;&nbsp;&nbsp;&nbsp;rated:&nbsp;'UNRATED',\n&nbsp;&nbsp;&nbsp;&nbsp;year:&nbsp;1917,\n&nbsp;&nbsp;&nbsp;&nbsp;imdb:&nbsp;{&nbsp;rating:&nbsp;7.8,&nbsp;votes:&nbsp;4680,&nbsp;id:&nbsp;8133&nbsp;}\n}</pre><p><br></p><p>We need to filter those movies where the <code>imdb</code> rating is greater then 7. Which query should we use?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.collection.find(query, projection)</code> selects documents in a collection or view and returns a cursor to the selected documents.</p><p><br></p><p><code>$gt</code> selects those documents where the value of the <code>field</code> is greater than (i.e. <code>&gt;</code>) the specified <code>value</code>. Syntax: <code>{ field: { $gt: value } }</code></p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.find/</p><p>https://www.mongodb.com/docs/manual/reference/operator/query/gt/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;\"$gt\":&nbsp;7&nbsp;}&nbsp;} )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;\"$gte\":&nbsp;7&nbsp;}&nbsp;} )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;imdb.rating:&nbsp;{&nbsp;\"$gt\":&nbsp;7&nbsp;}&nbsp;} )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find(&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;\"$lt\":&nbsp;7&nbsp;}&nbsp;} )</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168606,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>We have a <code>movies</code><em> </em>collection with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd6223\"),\n    genres: [ 'Comedy', 'Drama', 'Family' ],\n    title: 'The Poor Little Rich Girl',\n    released: ISODate(\"1917-03-05T00:00:00.000Z\"),\n    year: 1917,\n    imdb: { rating: 6.9, votes: 884, id: 8443 }\n}</pre><p><br></p><p>We need to use Aggregation Framework to fetch all movies from this collection where <code>'Drama'</code> is in genres list and the minimum <code>'imdb.votes'</code> is at least 100. Additionally, in the projection stage, we want to leave only the following fields:</p><p><em>-&gt;&nbsp;</em><code>title</code></p><p><em>-&gt; </em><code>genres</code></p><p><em>-&gt; </em><code>imdb.votes</code></p><p><br></p><p><strong>Example output:</strong></p><p><br></p><pre class=\"prettyprint linenums\">{\n&nbsp;&nbsp;  title:&nbsp;'Miss&nbsp;Lulu&nbsp;Bett',\n&nbsp;&nbsp;  genres:&nbsp;[&nbsp;'Comedy',&nbsp;'Drama'&nbsp;],\n&nbsp;&nbsp;  imdb:&nbsp;{&nbsp;votes:&nbsp;204&nbsp;}\n}</pre><p><br></p><p>Which pipeline should you use?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.collection.aggregate(pipeline, options)</code><strong> </strong>calculates aggregate values for the data in a collection or a view. </p><p><br></p><p>The <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. A group key is often a field, or group of fields. The group key can also be the result of an expression. Use the <code>_id</code> field in the <code>$group</code> pipeline stage to set the group key. In the <code>$group</code> stage output, the <code>_id</code> field is set to the group key for that document.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$match:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$in:&nbsp;['Drama']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$gte:&nbsp;100\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$project:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>",
                    "<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$match:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$nin:&nbsp;['Drama']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$gte:&nbsp;100\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>",
                    "<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$project:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>",
                    "<pre class=\"prettyprint linenums\">[{\n&nbsp;&nbsp;&nbsp;&nbsp;$match:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$in:&nbsp;['Drama']\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$project:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genres:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'imdb.votes':&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}]</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168608,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Given a <code>movies</code><em> </em>collection where each document has the following structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"573a1390f29313caabcd60e4\"),\n    genres: [ 'Short', 'Comedy', 'Drama' ],\n    title: 'The Immigrant',\n    year: 1917,\n    imdb: { rating: 7.8, votes: 4680, id: 8133 },\n    countries: [ 'USA' ]\n}</pre><p><br></p><p>This time we are using the Aggregation Framework to search our database. Which of the following queries will find all movies with a rating greater than 8?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><br></p><pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;imdb.rating:&nbsp;{&nbsp;$gt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre><p><br></p><p>This is incorrect because we need to use quotes in this case.</p><p><br></p><pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$gte:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre><p><br></p><p>This is incorrect because $gte also checks for equality.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$gt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$gte:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;imdb.rating:&nbsp;{&nbsp;$gt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.aggregate([\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;$match:&nbsp;{&nbsp;\"imdb.rating\":&nbsp;{&nbsp;$lt:&nbsp;8&nbsp;}&nbsp;}&nbsp;}\n])</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:30:06Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168610,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which of the following constraints might impact your data model for MongoDB? (select 3)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>The key challenge in data modeling is balancing the needs of the application, the performance characteristics of the database engine, and the data retrieval patterns. When designing data models, always consider the application usage of the data (i.e. queries, updates, and processing of the data) as well as the inherent structure of the data itself. Unlike SQL databases, where you must determine and declare a table's schema before inserting data, MongoDB's collections, by default, do not require their documents to have the same schema.</p><p><br></p><p>Only the operating system has no effect on the data model for MongoDB.</p><p><br></p><p>https://docs.mongodb.com/manual/core/data-modeling-introduction/</p>",
                "answers": [
                    "<p>RAM</p>",
                    "<p>Network</p>",
                    "<p>Security &amp; Compliance</p>",
                    "<p>Operating System</p>"
                ]
            },
            "correct_response": [
                "a",
                "b",
                "c"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168612,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>How can we represent a one-to-one relationship in MongoDB? (select 3)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-one-relationships-between-documents/</p>",
                "answers": [
                    "<p>We can embed fields in the document.</p>",
                    "<p>We can embed fields as a child document in the document.</p>",
                    "<p>We can link to a single document in another collection.</p>",
                    "<p>We cannot represent one-to-one relationship in MongoDB.</p>"
                ]
            },
            "correct_response": [
                "a",
                "b",
                "c"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168614,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which of the following queries can use an index on the <code>\"title\"</code><em> </em>field? (select 2)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a <em>collection scan</em>, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect.</p><p><br></p><p>https://docs.mongodb.com/manual/indexes/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.movies.find( { \"title\": \"Death Note\" } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find( { \"genres\": \"Drama\", \"type\": \"series\" } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find()</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find( { \"_id\":&nbsp;245 } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find( { \"title\": \"Titanic\" } )</pre>"
                ]
            },
            "correct_response": [
                "a",
                "e"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168616,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>What can you deduce from the <code>explain()</code> method? (select 3)</p><p><br></p><p>For example: </p><p><br></p><pre class=\"prettyprint linenums\">db.collection.find().explain()</pre><p><br></p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>cursor.explain(verbosity)</code> provides information on the query plan for the <code>db.collection.find()</code> method.</p><p>The <code>explain()</code> method has the following form:</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.find().explain()</pre><p><br></p><p>https://docs.mongodb.com/manual/reference/method/cursor.explain/</p>",
                "answers": [
                    "<p>The index used by the chosen plan.</p>",
                    "<p>Whether the sort stage was performed by index or performed in memory.</p>",
                    "<p>All stages that the query must go through with details about the time it takes, number of documents processed and returned to the next stage in the pipeline.</p>",
                    "<p>All available indexes for this collection.</p>"
                ]
            },
            "correct_response": [
                "a",
                "b",
                "c"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168618,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>We have the following schema for a <code>movies</code><em> </em>collection:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId,\n    title: String,\n    genres: Array,\n    languages: Array,\n    year: 32-bit integer\n}</pre><p><br></p><p>And the following index on the <code>movies</code><em> </em>collection:</p><p><br></p><pre class=\"prettyprint linenums\">{&nbsp;title:&nbsp;1&nbsp;}</pre><p><br></p><p>Which of the following queries will use the given index to perform the sorting stage? (select 3)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><br></p><pre class=\"prettyprint linenums\">db.movies.find( { genres:&nbsp;\"Drama\" } ).sort( { title:&nbsp;1 } )</pre><p><br></p><p>In this case the index will be used to retrieve the sorted documents and then it will filter the movies matching the genre. The others are obvious.</p><p><br></p><p>https://docs.mongodb.com/manual/indexes/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.movies.find( {} ).sort( { title:&nbsp;1 } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find( {} ).sort( { title:&nbsp;-1 } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find( { genres:&nbsp;\"Drama\" } ).sort( { title:&nbsp;1 } )</pre>",
                    "<pre class=\"prettyprint linenums\">db.movies.find( { genres:&nbsp;\"Drama\" } ).sort( { year:&nbsp;1 } )</pre>"
                ]
            },
            "correct_response": [
                "a",
                "b",
                "c"
            ],
            "updated": "2023-02-09T14:31:54Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168620,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>We have the following index in a <code>movies</code><em> </em>collection:</p><p><br></p><pre class=\"prettyprint linenums\">{ title: 1, genres: 1 }</pre><p><br></p><p>We want to insert the following document:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  \"title\": \"The Immigrant\",\n  \"year\": 1917,\n  \"genres\": [\n      \"Short\",\n      \"Comedy\",\n      \"Drama\"\n  ]\n}</pre><p><br></p><p>How many index entries will be created?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Index entries:</p><p><br></p><pre class=\"prettyprint linenums\">\"The&nbsp;Immigrant\",&nbsp;\"Short\"\n\"The&nbsp;Immigrant\",&nbsp;\"Comedy\"\n\"The&nbsp;Immigrant\",&nbsp;\"Drama\"</pre><p><br></p><p>https://docs.mongodb.com/manual/indexes/</p>",
                "answers": [
                    "<p>0</p>",
                    "<p>1</p>",
                    "<p>2</p>",
                    "<p>3</p>",
                    "<p>4</p>"
                ]
            },
            "correct_response": [
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168622,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>We have the following index in a <code>movies</code><em> </em>collection:</p><p><br></p><pre class=\"prettyprint linenums\">{ title: 1, genres: 1 }</pre><p><br></p><p>We want to insert the following document:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  \"title\": \"The Immigrant\",\n  \"year\": 1917,\n  \"genres\": [\n      \"Short\",\n      \"Comedy\",\n      \"Drama\"\n  ]\n}</pre><p><br></p><p>Select the appropriate index entries.</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a <em>collection scan</em>, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect.</p><p><br></p><p>Index entries:</p><p><br></p><pre class=\"prettyprint linenums\">\"The&nbsp;Immigrant\",&nbsp;\"Comedy\"\n\"The&nbsp;Immigrant\",&nbsp;\"Drama\"\n\"The&nbsp;Immigrant\",&nbsp;\"Short\"</pre><p><br></p><p>https://docs.mongodb.com/manual/indexes/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">\"The&nbsp;Immigrant\",&nbsp;\"Comedy\"\n\"The&nbsp;Immigrant\",&nbsp;\"Drama\"\n\"The&nbsp;Immigrant\",&nbsp;\"Short\"</pre>",
                    "<pre class=\"prettyprint linenums\">\"Short\", \"The&nbsp;Immigrant\"\n\"Comedy\", \"The&nbsp;Immigrant\"\n\"Drama\", \"The&nbsp;Immigrant\"</pre>",
                    "<pre class=\"prettyprint linenums\">\"The&nbsp;Immigrant\",&nbsp;\"Short\", \"Comedy\", \"Drama\"</pre>",
                    "<pre class=\"prettyprint linenums\">\"Short\"\n\"Comedy\"\n\"Drama\"</pre>",
                    "<pre class=\"prettyprint linenums\">\"The&nbsp;Immigrant\",&nbsp;\"Short\"\n\"The&nbsp;Immigrant\",&nbsp;\"Comedy\"\n\"The&nbsp;Immigrant\",&nbsp;\"Drama\"</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:26:34Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168624,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which of the following rules (when ordering) should be followed when building query indexes?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>For compound indexes, this rule of thumb is helpful in deciding the order of fields in the index:</p><ul><li><p>First, add those fields against which <strong>Equality</strong> queries are run.</p></li><li><p>The next fields to be indexed should reflect the <strong>Sort</strong> order of the query.</p></li><li><p>The last fields represent the <strong>Range</strong> of data to be accessed.</p></li></ul><p><br></p><p>https://www.mongodb.com/blog/post/performance-best-practices-indexing</p>",
                "answers": [
                    "<p>equality, sort, range</p>",
                    "<p>equality, range, sort</p>",
                    "<p>range, sort, equality</p>",
                    "<p>There is no specific rule.</p>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168626,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>We have the following indexes:</p><p><br></p><pre class=\"prettyprint linenums\">{&nbsp;name:&nbsp;1,&nbsp;founded_year:&nbsp;1&nbsp;}\n{&nbsp;tag_list:&nbsp;1,&nbsp;is_active:&nbsp;1&nbsp;}</pre><p><br></p><p>And the following documents:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    _id: ObjectId(\"52cdef7c4bab8bd675297daa\"),\n    name: \"Sparter\",\n    founded_year: 2007,\n    tag_list: [\"gaming\", \"game\", \"wow\"],\n    is_active: true\n},\n{\n&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;ObjectId(\"52cdef7c4bab8bd675297da3\"),\n&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;\"Yahoo!\",\n&nbsp;&nbsp;&nbsp;&nbsp;founded_year:&nbsp;1994,\n&nbsp;&nbsp;&nbsp;&nbsp;tag_list:&nbsp;[\"search\",&nbsp;\"webmail\"],\n    is_active: true\n}</pre><p><br></p><p>Select the true statement.</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>To index a field that holds an array value, MongoDB creates an index key for each element in the array. These <em>multikey</em> indexes support efficient queries against array fields. Multikey indexes can be constructed over arrays that hold both scalar values (e.g. strings, numbers) <em>and</em> nested documents. To create a multikey index, use the <code>db.collection.createIndex()</code> method.</p><p><br></p><p>https://docs.mongodb.com/manual/core/index-multikey/</p>",
                "answers": [
                    "<p>There would be a total of 7 index keys created across all of these documents and indexes.</p>",
                    "<p>There would be a total of 2 index keys created across all of these documents and indexes.</p>",
                    "<p>There would be a total of 4 index keys created across all of these documents and indexes.</p>",
                    "<p>The number of index keys cannot be determined from the given data.</p>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168628,
            "assessment_type": "multi-select",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Select all default configurations for <code>mongod</code>. (select 3)</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>storage.dbPath</code><strong> </strong>- the directory where the <code>mongod</code> instance stores its data.<strong> </strong>Default:</p><ul><li><p><code>/data/db</code> on Linux and macOS</p></li><li><p><code>\\data\\db</code> on Windows</p></li></ul><p><br></p><p><code><strong>net.port</strong></code><strong> - </strong>the TCP port on which the MongoDB instance listens for client connections. Default:</p><ul><li><p>27017 for <code>mongod</code> (if not a shard member or a config server member) or <code>mongos</code> instance</p></li><li><p>27018 if <code>mongod</code> is a <code>shard member</code></p></li><li><p>27019 if <code>mongod</code> is a <code>config server member</code></p></li></ul><p><br></p><p>By default, <em>mongod </em>doesn't enforce authentication.</p><p><br></p><p>https://docs.mongodb.com/manual/reference/configuration-options/</p>",
                "answers": [
                    "<p>The default port for <code>mongod</code><em> </em>is 27017.</p>",
                    "<p>The default data directory for <code>mongod</code><em> </em>is <code>/data/db</code> (on Linux).</p>",
                    "<p>By default, <code>mongod</code><em> </em>does enforce authentication.</p>",
                    "<p>By default, <code>mongod</code><em> </em>is only bound to localhost (or 127.0.0.1).</p>"
                ]
            },
            "correct_response": [
                "a",
                "b",
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168630,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider the following command:</p><p><br></p><pre class=\"prettyprint linenums\">$ mongod&nbsp;--dbpath&nbsp;/data/db&nbsp;--logpath&nbsp;/data/logs&nbsp;--replSet&nbsp;REPL1&nbsp;--bind_ip&nbsp;'127.0.0.1,192.168.168.84'&nbsp;--keyFile&nbsp;/data/keyfile&nbsp;--fork</pre><p><br>Which of the following configuration files is equivalent to the specified command?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>https://docs.mongodb.com/manual/reference/configuration-options/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">storage:\n&nbsp;&nbsp;dbPath:&nbsp;\"/data/db\"\nsystemLog:\n&nbsp;&nbsp;destination:&nbsp;file\n&nbsp;&nbsp;path:&nbsp;\"/data/logs\"\nreplication:&nbsp;\n&nbsp;&nbsp;replSetName:&nbsp;\"REPL1\"\nnet:\n&nbsp;&nbsp;bindIp:&nbsp;\"127.0.0.1,192.168.168.84\"\nsecurity:&nbsp;\n&nbsp;&nbsp;keyFile:&nbsp;\"/data/keyfile\"\nprocessManagement:\n&nbsp;&nbsp;fork:&nbsp;true</pre>",
                    "<pre class=\"prettyprint linenums\">storage\n&nbsp;&nbsp;dbPath=\"/data/db\"\nsystemLog\n&nbsp;&nbsp;destination=file\n&nbsp;&nbsp;path=\"/data/logs\"\nreplication&nbsp;\n&nbsp;&nbsp;replSetName=\"REPL1\"\nnet\n&nbsp;&nbsp;bindIp=\"127.0.0.1,192.168.168.84\"\nsecurity&nbsp;\n&nbsp;&nbsp;keyFile=\"/data/keyfile\"\nprocessManagement\n&nbsp;&nbsp;fork=true</pre>",
                    "<pre class=\"prettyprint linenums\">storage:\n&nbsp;&nbsp;dbPath:&nbsp;\"/data/db\"\nsystemLog:\n&nbsp;&nbsp;destination:&nbsp;file\n&nbsp;&nbsp;path:&nbsp;\"/data/logs\"\nnet:\n&nbsp;&nbsp;bindIp:&nbsp;\"127.0.0.1,192.168.168.84\"\nsecurity:&nbsp;\n&nbsp;&nbsp;keyFile:&nbsp;\"/data/keyfile\"\nprocessManagement:\n&nbsp;&nbsp;fork:&nbsp;true</pre>",
                    "<pre class=\"prettyprint linenums\">storage:\n&nbsp;&nbsp;dbPath:&nbsp;\"/data/db\"\nsystemLog:\n&nbsp;&nbsp;destination:&nbsp;file\n&nbsp;&nbsp;path:&nbsp;\"/data/logs\"\nreplication:&nbsp;\n&nbsp;&nbsp;replSetName:&nbsp;\"REPL1\"\nnet:\n&nbsp;&nbsp;bindIp:&nbsp;\"127.0.0.1,192.168.168.84\"\nprocessManagement:\n&nbsp;&nbsp;fork:&nbsp;true</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168632,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Where is the MongoDB configuration file usually located?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>https://docs.mongodb.com/manual/reference/configuration-options/#configuration-file</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">/etc/mongod.conf</pre>",
                    "<pre class=\"prettyprint linenums\">/tmp/mongod.conf</pre>",
                    "<pre class=\"prettyprint linenums\">/home/user/mongod.conf</pre>",
                    "<pre class=\"prettyprint linenums\">/bin/mongod.conf</pre>",
                    "<pre class=\"prettyprint linenums\">/var/log/mongod.conf</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168654,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a collection named <code>students</code><em> </em>with the following documents:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f0a7e80d8c9c7b5a48c49e1\"),\n   \"student_id\" : 101,\n   \"name\" : \"John Doe\",\n   \"gender\" : \"Male\",\n   \"age\" : 20,\n   \"scores\" : [\n      {\n         \"subject\" : \"Math\",\n         \"score\" : 85\n      },\n      {\n         \"subject\" : \"English\",\n         \"score\" : 90\n      }\n   ]\n}\n\n{\n   \"_id\" : ObjectId(\"5f0a7e80d8c9c7b5a48c49e2\"),\n   \"student_id\" : 102,\n   \"name\" : \"Jane Doe\",\n   \"gender\" : \"Female\",\n   \"age\" : 22,\n   \"scores\" : [\n      {\n         \"subject\" : \"Math\",\n         \"score\" : 80\n      },\n      {\n         \"subject\" : \"English\",\n         \"score\" : 95\n      }\n   ]\n}\n\n{\n   \"_id\" : ObjectId(\"5f0a7e80d8c9c7b5a48c49e3\"),\n   \"student_id\" : 103,\n   \"name\" : \"Bob Smith\",\n   \"gender\" : \"Male\",\n   \"age\" : 21,\n   \"scores\" : [\n      {\n         \"subject\" : \"Math\",\n         \"score\" : 90\n      },\n      {\n         \"subject\" : \"English\",\n         \"score\" : 88\n      }\n   ]\n}</pre><p><br></p><p>What is the query to retrieve the average score for each subject across all students in the <code>students</code> collection?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct query:</p><p><br></p><pre class=\"prettyprint linenums\">db.students.aggregate([\n   {\n      $unwind: \"$scores\"\n   },\n   {\n      $group: {\n         _id: \"$scores.subject\",\n         average_score: { $avg: \"$scores.score\" }\n      }\n   }\n])</pre><p><br></p><p><code>$unwind</code> - deconstructs an array field from the input documents to output a document for <em>each</em> element. Each output document is the input document with the value of the array field replaced by the element.</p><p><code>$group</code> - the <code>$group</code> stage separates documents into groups according to a \"group key\". The output is one document for each unique group key. The <code>$group</code> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{\n  $group:\n    {\n      _id: &lt;expression&gt;, // Group key\n      &lt;field1&gt;: { &lt;accumulator1&gt; : &lt;expression1&gt; },\n      ...\n    }\n }</pre><p><br></p><p>https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.students.aggregate([\n   {\n      $unwind: \"$scores\"\n   },\n   {\n      $group: {\n         _id: \"$scores.subject\",\n         average_score: { $avg: \"$scores.score\" }\n      }\n   }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.students.aggregate([\n   {\n      $group: {\n         _id: \"$scores.subject\",\n         average_score: { $avg: \"$scores.score\" }\n      }\n   }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.students.aggregate([\n   {\n      $push: \"$scores\"\n   },\n   {\n      $group: {\n         _id: \"$scores.subject\",\n         average_score: { $avg: \"$scores.score\" }\n      }\n   }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.students.aggregate([\n   {\n      $unwind: \"$scores\"\n   },\n   {\n      $group: {\n         _id: \"$subject\",\n         average_score: { $avg: \"$score\" }\n      }\n   }\n])</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168656,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a collection named <code>employees</code> with the following document:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f0a7e80d8c9c7b5a48c49e1\"),\n   \"name\" : \"John Doe\",\n   \"position\" : \"Developer\",\n   \"department\" : \"IT\",\n   \"hire_date\" : ISODate(\"2021-01-01T00:00:00.000Z\")\n}</pre><p><br></p><p>What is the query to update the <code>\"position\"</code> field for the employee with <code>\"_id\"</code> equal to <code>ObjectId(\"5f0a7e80d8c9c7b5a48c49e1\")</code> to <code>\"Manager\"</code>?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct query:</p><p><br></p><pre class=\"prettyprint linenums\">db.employees.updateOne(\n   { _id: ObjectId(\"5f0a7e80d8c9c7b5a48c49e1\") },\n   { $set: { position: \"Manager\" } }\n)</pre><p><br></p><p><code>db.collection.updateOne(filter, update, options)</code> - Udates a single document within the collection based on the filter. The <code>updateOne()</code> method has the following syntax:</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.updateOne(\n   &lt;filter&gt;,\n   &lt;update&gt;,\n   {\n     upsert: &lt;boolean&gt;,\n     writeConcern: &lt;document&gt;,\n     collation: &lt;document&gt;,\n     arrayFilters: [ &lt;filterdocument1&gt;, ... ],\n     hint:  &lt;document|string&gt;        // Available starting in MongoDB 4.2.1\n   }\n)</pre><p><br></p><p>https://www.mongodb.com/docs/manual/reference/method/db.collection.updateOne/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.employees.updateOne(\n   { _id: ObjectId(\"5f0a7e80d8c9c7b5a48c49e1\") },\n   { $set: { position: \"Manager\" } }\n)</pre>",
                    "<pre class=\"prettyprint linenums\">db.employees.updateOne(\n   { $set: { position: \"Manager\" } }\n)</pre>",
                    "<pre class=\"prettyprint linenums\">db.employees.updateOne(\n   { _id: ObjectId(\"5f0a7e80d8c9c7b5a48c49e1\") },\n   { $unset: { position: \"Manager\" } }\n)</pre>",
                    "<pre class=\"prettyprint linenums\">db.employees.updateOne(\n   { _id: ObjectId(\"5f0a7e80d8c9c7b5a48c49e1\") },\n   { $update: { position: \"Manager\" } }\n)</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168658,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider the following MongoDB <code>orders</code><em> </em>collection:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\": 1,\n   \"order_date\": ISODate(\"2022-01-01T00:00:00Z\"),\n   \"customer_id\": 101,\n   \"items\": [\n      {\n         \"product_id\": 201,\n         \"quantity\": 2,\n         \"price\": 10\n      },\n      {\n         \"product_id\": 202,\n         \"quantity\": 1,\n         \"price\": 20\n      }\n   ]\n},\n{\n   \"_id\": 2,\n   \"order_date\": ISODate(\"2022-02-01T00:00:00Z\"),\n   \"customer_id\": 102,\n   \"items\": [\n      {\n         \"product_id\": 203,\n         \"quantity\": 3,\n         \"price\": 15\n      },\n      {\n         \"product_id\": 204,\n         \"quantity\": 4,\n         \"price\": 10\n      }\n   ]\n},\n{\n   \"_id\": 3,\n   \"order_date\": ISODate(\"2022-03-01T00:00:00Z\"),\n   \"customer_id\": 101,\n   \"items\": [\n      {\n         \"product_id\": 205,\n         \"quantity\": 1,\n         \"price\": 25\n      }\n   ]\n}</pre><p><br></p><p>What is the aggregation pipeline to find the total sales for each customer in the year 2022?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct query:</p><p><br></p><pre class=\"prettyprint linenums\">db.orders.aggregate([\n  {\n    $match: {\n      order_date: {\n        $gte: ISODate(\"2022-01-01T00:00:00Z\"),\n        $lt: ISODate(\"2023-01-01T00:00:00Z\")\n      }\n    }\n  },\n  { $unwind: \"$items\" },\n  { $group: { _id: \"$customer_id\", total_sales: { $sum: \"$items.price\" } } }\n])</pre><p><br></p><p><code>$match</code> - Filters the documents to pass only the documents that match the specified condition(s) to the next pipeline stage. The <code>$match</code> stage has the following prototype form:</p><p><br></p><pre class=\"prettyprint linenums\">{ $match: { &lt;query&gt; } }</pre><p><br></p><p><code>$unwind</code> - Deconstructs an array field from the input documents to output a document for <em>each</em> element. Each output document is the input document with the value of the array field replaced by the element.</p><p><br></p><p>https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/</p><p>https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.orders.aggregate([\n  {\n    $match: {\n      order_date: {\n        $gte: ISODate(\"2022-01-01T00:00:00Z\"),\n        $lt: ISODate(\"2023-01-01T00:00:00Z\")\n      }\n    }\n  },\n  { $unwind: \"$items\" },\n  { $group: { _id: \"$customer_id\", total_sales: { $sum: \"$items.price\" } } }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.orders.aggregate([\n  {\n    $match: {\n      order_date: {\n        $gt: ISODate(\"2021-12-31T00:00:00Z\"),\n        $lt: ISODate(\"2023-01-01T00:00:00Z\")\n      }\n    }\n  },\n  { $group: { _id: \"$customer_id\", total_sales: { $sum: \"$items.price\" } } }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.runCommand({\n  aggregate: \"orders\",\n  match: {\n    order_date: { $gte: \"2022-01-01T00:00:00Z\", $lt: \"2023-01-01T00:00:00Z\" }\n  },\n  group: { _id: \"$customer_id\", total_sales: { $sum: \"$items.price\" } }\n})</pre>",
                    "<pre class=\"prettyprint linenums\">db.orders.aggregate([\n  {\n    $match: {\n      order_date: {\n        $gte: ISODate(\"2022-01-01T00:00:00Z\"),\n        $lt: ISODate(\"2023-01-01T00:00:00Z\")\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      total_sales: { $sum: \"$items.quantity * $items.price\" }\n    }\n  }\n])</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168660,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>What is the correct syntax to perform a <code>$lookup</code> operation in MongoDB to combine documents from two collections, <code>employees</code><em> </em>and <code>departments</code>, based on the <code>\"department_id\"</code> field in the <code>employees</code><em> </em>collection and the <code>\"_id\"</code> field in the <code>departments</code><em> </em>collection?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct query:</p><p><br></p><pre class=\"prettyprint linenums\">db.employees.aggregate([\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"department_id\",\n      foreignField: \"_id\",\n      as: \"department_info\"\n    }\n  }\n])</pre><p><br></p><p><code>$lookup</code> - Performs a left outer join to a collection in the <em>same</em> database to filter in documents from the \"joined\" collection for processing. The <code>$lookup</code> stage adds a new array field to each input document. The new array field contains the matching documents from the \"joined\" collection. The <code>$lookup</code> stage passes these reshaped documents to the next stage. Syntax:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   $lookup:\n     {\n       from: &lt;collection to join&gt;,\n       localField: &lt;field from the input documents&gt;,\n       foreignField: &lt;field from the documents of the \"from\" collection&gt;,\n       as: &lt;output array field&gt;\n     }\n}</pre><p><br></p><p>https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.employees.aggregate([\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"department_id\",\n      foreignField: \"_id\",\n      as: \"department_info\"\n    }\n  }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.employees.aggregate({\n  $lookup: {\n    from: \"departments\",\n    localField: \"department_id\",\n    foreignField: \"_id\",\n    as: \"department_info\"\n  }\n})</pre>",
                    "<pre class=\"prettyprint linenums\">db.aggregate([\n  {\n    $lookup: {\n      from: \"employees\",\n      to: \"departments\",\n      on: \"department_id\",\n      as: \"department_info\"\n    }\n  }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.aggregate({\n  $lookup: {\n    from: \"employees\",\n    to: \"departments\",\n    on: \"department_id\",\n    as: \"department_info\"\n  }\n})</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:28:35Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168662,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a MongoDB database containing a collection of documents representing product information for an e-commerce website. The documents have the following structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\": ObjectId(\"5f95a1d11a12b400001b75c0\"),\n   \"product_name\": \"Smartphone\",\n   \"brand\": \"Apple\",\n   \"price\": 800,\n   \"categories\": [ \"Electronics\", \"Smartphones\" ],\n   \"reviews\": [\n      { \"username\": \"user1\", \"rating\": 4, \"comment\": \"Great product!\" },\n      { \"username\": \"user2\", \"rating\": 5, \"comment\": \"Excellent!\" },\n      { \"username\": \"user3\", \"rating\": 3, \"comment\": \"Good but overpriced.\" }\n   ]\n}</pre><p><br></p><p>Select the MongoDB aggregation pipeline that returns the average rating of all products grouped by brand. The result should include only brands with an average rating greater than or equal to 4. The output should have the following format:</p><p><br></p><pre class=\"prettyprint linenums\">{ \"brand\": \"Apple\", \"avg_rating\": 4.33 }</pre><p><br></p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct pipeline:</p><p><br></p><pre class=\"prettyprint linenums\">[\n   {\n      \"$unwind\": \"$reviews\"\n   },\n   {\n      \"$group\": {\n         \"_id\": \"$brand\",\n         \"avg_rating\": { \"$avg\": \"$reviews.rating\" }\n      }\n   },\n   {\n      \"$match\": {\n         \"avg_rating\": { \"$gte\": 4 }\n      }\n   },\n   {\n      \"$project\": {\n         \"brand\": \"$_id\",\n         \"avg_rating\": \"$avg_rating\",\n         \"_id\": 0\n      }\n   }\n]</pre><p><br></p><ol><li><p>The first stage of the pipeline <code><strong>$unwind</strong></code>s the <code><strong>reviews</strong></code> array, which means each document will be split into multiple documents, one for each review.</p></li><li><p>The second stage <code><strong>$group</strong></code>s the documents by brand using the <code><strong>_id</strong></code> field, and calculates the average rating using the <code><strong>$avg</strong></code> operator on the <code><strong>reviews.rating</strong></code> field.</p></li><li><p>The third stage <code><strong>$match</strong></code>es only the brands with an average rating greater than or equal to 4.</p></li><li><p>The final stage <code><strong>$project</strong></code>s the final output format, including only the <code><strong>brand</strong></code> and <code><strong>avg_rating</strong></code> fields, and omitting the <code><strong>_id</strong></code> field.</p></li></ol>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">[\n   {\n      \"$unwind\": \"$reviews\"\n   },\n   {\n      \"$group\": {\n         \"_id\": \"$brand\",\n         \"avg_rating\": { \"$avg\": \"$reviews.rating\" }\n      }\n   },\n   {\n      \"$match\": {\n         \"avg_rating\": { \"$gte\": 4 }\n      }\n   },\n   {\n      \"$project\": {\n         \"brand\": \"$_id\",\n         \"avg_rating\": \"$avg_rating\",\n         \"_id\": 0\n      }\n   }\n]</pre>",
                    "<pre class=\"prettyprint linenums\">[\n   {\n      \"$group\": {\n         \"_id\": \"$brand\",\n         \"avg_rating\": { \"$avg\": \"$reviews.rating\" }\n      }\n   },\n   {\n      \"$match\": {\n         \"avg_rating\": { \"$gte\": 4 }\n      }\n   },\n   {\n      \"$project\": {\n         \"brand\": \"$_id\",\n         \"avg_rating\": \"$avg_rating\",\n         \"_id\": 0\n      }\n   }\n]</pre>",
                    "<pre class=\"prettyprint linenums\">[\n   {\n      \"$unwind\": \"$reviews\"\n   },\n   {\n      \"$group\": {\n         \"_id\": \"$brand\",\n         \"avg_rating\": { \"$avg\": \"$reviews.rating\" }\n      }\n   },\n   {\n      \"$project\": {\n         \"brand\": \"$_id\",\n         \"avg_rating\": \"$avg_rating\",\n         \"_id\": 0\n      }\n   }\n]</pre>",
                    "<pre class=\"prettyprint linenums\">[\n   {\n      \"$unwind\": \"$reviews\"\n   },\n   {\n      \"$group\": {\n         \"_id\": \"$brand\",\n         \"avg_rating\": { \"$avg\": \"$reviews.rating\" }\n      }\n   },\n   {\n      \"$match\": {\n         \"avg_rating\": { \"$gte\": 4 }\n      }\n   }\n]</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168664,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a MongoDB database containing a collection of documents representing employee records for a company. The documents have the following structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\": ObjectId(\"5f95a1d11a12b400001b75c0\"),\n   \"employee_id\": \"EMP-001\",\n   \"name\": {\n      \"first\": \"John\",\n      \"last\": \"Doe\"\n   },\n   \"department\": \"Sales\",\n   \"hire_date\": ISODate(\"2022-01-01T00:00:00.000Z\"),\n   \"salary\": 65000,\n   \"performance_rating\": 4\n}</pre><p><br></p><p>You are frequently running the following query to find all employees hired after a certain date, with a specific department and performance rating:</p><p><br></p><pre class=\"prettyprint linenums\">db.employees.find({\n   \"hire_date\": {\n      \"$gte\": ISODate(\"2022-01-01T00:00:00.000Z\")\n   },\n   \"department\": \"Sales\",\n   \"performance_rating\": 4\n})</pre><p><br></p><p>What index would you create to improve the performance of this query?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>You should create a compound index on the <code><strong>hire_date</strong></code>, <code><strong>department</strong></code>, and <code><strong>performance_rating</strong></code> fields. -&gt; Correct.</p><p>The query you are running performs a query on three fields, <code><strong>hire_date</strong></code>, <code><strong>department</strong></code>, and <code><strong>performance_rating</strong></code>, and a compound index on these fields will improve the query performance. A compound index is an index that includes multiple fields in the index key, allowing the index to support queries that filter or sort data based on multiple fields.</p><p>In this case, a compound index on the <code><strong>hire_date</strong></code>, <code><strong>department</strong></code>, and <code><strong>performance_rating</strong></code> fields will allow the MongoDB query planner to use the index to quickly filter the documents based on the hire date, department, and performance rating criteria, reducing the amount of data that needs to be scanned and improving the query performance. The index order is also important, as MongoDB will use the left-most prefix of the index in order, so the order of the fields in the compound index should match the order of the fields in the query conditions for optimal performance.</p>",
                "answers": [
                    "<p>You should create a compound index on the <code><strong>hire_date</strong></code>, <code><strong>department</strong></code>, and <code><strong>performance_rating</strong></code> fields.</p>",
                    "<p>You should create an index on the <code><strong>hire_date</strong></code> field.</p>",
                    "<p>You should create a compound index on the <code><strong>department</strong></code>, and <code><strong>performance_rating</strong></code> fields.</p>",
                    "<p>You should create a compound index on the <code><strong>performance_rating</strong></code>, <code><strong>department</strong></code>, and <code><strong>hire_date</strong></code><strong> </strong>fields.</p>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168666,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider two collections in MongoDB, <code>students</code> and <code>scores</code>, where <code>students</code> contains information about students and <code>scores</code> contains information about their exam scores. Which of the following <code>$lookup</code> pipeline stages is correct for joining the two collections on the <code>\"student_id\"</code> field?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>In this scenario, the correct <code>$lookup</code> pipeline stage would be:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"$lookup\":{\n      \"from\":\"scores\",\n      \"localField\":\"student_id\",\n      \"foreignField\":\"_id\",\n      \"as\":\"student_scores\"\n   }\n}</pre><p><br></p><p>The <code>from</code> field specifies the collection to join with, which is <code>scores</code> in this case. The <code>localField</code> field specifies the field in the local (students) collection to join on, which is <code>\"student_id\"</code>. The <code>foreignField</code> field specifies the field in the foreign (scores) collection to join on, which is <code>\"_id\"</code>. The <code>as</code> field specifies the name of the new array field that will contain the joined documents, which is <code>\"student_scores\"</code>.</p><p>This pipeline stage will join the two collections based on the <code>\"student_id\"</code> field in the <code>students</code> collection and the <code>\"_id\"</code> field in the <code>scores</code> collection, and create a new array field <code>\"student_scores\"</code> that contains the joined documents.</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">{\n   \"$lookup\":{\n      \"from\":\"scores\",\n      \"localField\":\"student_id\",\n      \"foreignField\":\"_id\",\n      \"as\":\"student_scores\"\n   }\n}</pre>",
                    "<pre class=\"prettyprint linenums\">{\n   \"$lookup\":{\n      \"from\":\"students\",\n      \"localField\":\"student_id\",\n      \"foreignField\":\"student_id\",\n      \"as\":\"student_scores\"\n   }\n}</pre>",
                    "<pre class=\"prettyprint linenums\">{\n   \"$lookup\":{\n      \"from\":\"scores\",\n      \"localField\":\"_id\",\n      \"foreignField\":\"student_id\",\n      \"as\":\"student_scores\"\n   }\n}</pre>",
                    "<pre class=\"prettyprint linenums\">{\n   \"$lookup\":{\n      \"from\":\"students\",\n      \"localField\":\"_id\",\n      \"foreignField\":\"student_id\",\n      \"as\":\"student_scores\"\n   }\n}</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168668,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>In MongoDB, consider the following query:</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.find({\n    $and: [\n        { price: { $gt: 10 } },\n        { $or: [\n            { color: \"red\" },\n            { brand: \"Acme\" }\n        ] }\n    ]\n})</pre><p><br></p><p>What does this query do?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Selects documents from the collection where the price is greater than 10 and either the color is \"red\" or the brand is \"Acme\". -&gt;&nbsp;Correct. </p><p>The query uses the logical operator <code><strong>$and</strong></code> to combine two conditions, the first being that the <code><strong>price</strong></code> must be greater than 10 and the second being that either the <code><strong>color</strong></code> must be \"red\" or the <code><strong>brand</strong></code> must be \"Acme\". The <code><strong>$or</strong></code> operator is used within the second condition to specify that either the <code><strong>color</strong></code> must be \"red\" or the <code><strong>brand</strong></code> must be \"Acme\". The final query selects all documents from the <code><strong>collection</strong></code> where the <code><strong>price</strong></code> is greater than 10 and either the <code><strong>color</strong></code> is \"red\" or the brand is \"Acme\".</p>",
                "answers": [
                    "<p>Selects documents from the collection where the price is less than or equal to 10 and the color is not \"red\" or the brand is not \"Acme\".</p>",
                    "<p>Selects documents from the collection where the price is greater than 10 and the color is not \"red\" and the brand is not \"Acme\".</p>",
                    "<p>Selects documents from the collection where the price is greater than 10 and either the color is \"red\" or the brand is \"Acme\".</p>",
                    "<p>Selects documents from the collection where the price is less than or equal to 10 and either the color is \"red\" or the brand is \"Acme\".</p>"
                ]
            },
            "correct_response": [
                "c"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168670,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>In MongoDB, consider the following query:</p><p><br></p><pre class=\"prettyprint linenums\">db.collection.aggregate([\n    { $match: {\n        $and: [\n            { quantity: { $gt: 20 } },\n            { $or: [\n                { category: \"clothing\" },\n                { brand: \"Acme\" }\n            ] }\n        ]\n    } },\n    { $group: {\n        _id: \"$brand\",\n        total_quantity: { $sum: \"$quantity\" }\n    } },\n    { $sort: { total_quantity: -1 } }\n])</pre><p><br></p><p>What does this query do?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Filters documents from the collection where the quantity is greater than 20 and either the category is \"clothing\" or the brand is \"Acme\", groups the documents by brand, calculates the total quantity for each brand, and sorts the results in descending order of total quantity. -&gt; Correct.</p><p><br></p><p>The query performs the following operations:</p><ol><li><p><code><strong>$match</strong></code> stage: Filters documents from the collection using the logical operator <code><strong>$and</strong></code> to combine two conditions, the first being that the <code><strong>quantity</strong></code> must be greater than 20 and the second being that either the <code><strong>category</strong></code> must be \"clothing\" or the <code><strong>brand</strong></code> must be \"Acme\". The <code><strong>$or</strong></code> operator is used within the second condition to specify that either the <code><strong>category</strong></code> must be \"clothing\" or the <code><strong>brand</strong></code> must be \"Acme\".</p></li><li><p><code><strong>$group</strong></code> stage: Groups the filtered documents by <code><strong>brand</strong></code> and calculates the total quantity for each group using the <code><strong>$sum</strong></code> operator on the <code><strong>quantity</strong></code> field.</p></li><li><p><code><strong>$sort</strong></code> stage: Sorts the grouped results in descending order of <code><strong>total_quantity</strong></code>.</p></li></ol><p>The final query filters documents from the <code><strong>collection</strong></code> where the <code><strong>quantity</strong></code> is greater than 20 and either the <code><strong>category</strong></code> is \"clothing\" or the brand is \"Acme\", groups the documents by brand, calculates the total quantity for each brand, and sorts the results in descending order of total quantity.</p>",
                "answers": [
                    "<p>Groups documents from the collection by brand and calculates the total quantity for each brand, sorted in ascending order of total quantity.</p>",
                    "<p>Groups documents from the collection by brand and calculates the average quantity for each brand, sorted in ascending order of average quantity.</p>",
                    "<p>Filters documents from the collection where the quantity is less than or equal to 20 and either the category is not \"clothing\" or the brand is not \"Acme\", groups the documents by brand, calculates the total quantity for each brand, and sorts the results in ascending order of total quantity.</p>",
                    "<p>Filters documents from the collection where the quantity is greater than 20 and either the category is \"clothing\" or the brand is \"Acme\", groups the documents by brand, calculates the total quantity for each brand, and sorts the results in descending order of total quantity.</p>"
                ]
            },
            "correct_response": [
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168672,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a MongoDB collection named <code>employees</code> with the following document structure:</p><p><br></p><pre class=\"prettyprint linenums\">{\n    \"_id\" : ObjectId(\"5f7f39d8dbdfgbcabcabcabc\"),\n    \"name\" : \"John Doe\",\n    \"age\" : 32,\n    \"position\" : \"Manager\",\n    \"department\" : \"Sales\",\n    \"salary\" : 60000\n}</pre><p><br></p><p>You are required to find all employees who earn a salary greater than or equal to $60,000 and who work in the <code>\"Sales\"</code> department. Additionally, you are required to retrieve the average salary for all employees in the <code>\"Sales\"</code> department. Which of the following queries would perform the most efficient collection scan?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct answer:</p><p><br></p><pre class=\"prettyprint linenums\">db.employees.aggregate([\n    { $match: { department: \"Sales\", salary: { $gte: 60000 } } },\n    { $group: { _id: \"$department\", avg_salary: { $avg: \"$salary\" } } }\n]);</pre><p><br></p><p><strong>Explanations:</strong></p><p><br></p><pre class=\"prettyprint linenums\">db.employees.find({\n    department: \"Sales\",\n    salary: { $gte: 60000 }\n}).forEach(function(doc) {\n    // process the documents\n});</pre><p><br></p><p>This option performs a collection scan and retrieves all documents in the collection that match the specified conditions, which can result in poor performance if the collection is large.</p><p><br></p><pre class=\"prettyprint linenums\">db.employees.aggregate([\n    { $match: { department: \"Sales\" } },\n    { $group: { _id: \"$department\", avg_salary: { $avg: \"$salary\" } } },\n    { $match: { avg_salary: { $gte: 60000 } } }\n]);</pre><p><br></p><p>This option performs a collection scan, matches the specified conditions, groups the results by department, calculates the average salary for each department, and then matches the calculated average salary again, which is redundant and can result in decreased performance.</p><p><br></p><pre class=\"prettyprint linenums\">db.employees.aggregate([\n    { $match: { department: \"Sales\" } },\n    { $group: { _id: \"$department\", avg_salary: { $avg: \"$salary\" } } },\n    { $project: { _id: 0, avg_salary: { $gte: [ \"$avg_salary\", 60000 ] } } }\n]);</pre><p><br></p><p>This option performs a collection scan, matches the specified conditions, groups the results by department, calculates the average salary for each department, and then projects the results, but the projection is not using the <code><strong>$gte</strong></code> operator correctly and will not return the expected results.</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.employees.find({\n    department: \"Sales\",\n    salary: { $gte: 60000 }\n}).forEach(function(doc) {\n    // process the documents\n});</pre>",
                    "<pre class=\"prettyprint linenums\">db.employees.aggregate([\n    { $match: { department: \"Sales\", salary: { $gte: 60000 } } },\n    { $group: { _id: \"$department\", avg_salary: { $avg: \"$salary\" } } }\n]);</pre>",
                    "<pre class=\"prettyprint linenums\">db.employees.aggregate([\n    { $match: { department: \"Sales\" } },\n    { $group: { _id: \"$department\", avg_salary: { $avg: \"$salary\" } } },\n    { $match: { avg_salary: { $gte: 60000 } } }\n]);</pre>",
                    "<pre class=\"prettyprint linenums\">db.employees.aggregate([\n    { $match: { department: \"Sales\" } },\n    { $group: { _id: \"$department\", avg_salary: { $avg: \"$salary\" } } },\n    { $project: { _id: 0, avg_salary: { $gte: [ \"$avg_salary\", 60000 ] } } }\n]);</pre>"
                ]
            },
            "correct_response": [
                "b"
            ],
            "updated": "2023-02-09T14:28:06Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168674,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>You are designing a MongoDB database for a university that offers various courses and has a large student body. Each student can enroll in multiple courses, and each course can have multiple students enrolled. The university needs to keep track of the courses each student is enrolled in, as well as the students enrolled in each course. Which of the following data models would best fit this requirement?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>One collection for students, one collection for courses, and one collection for enrollments, with each enrollment document containing a reference to a student and a course. -&gt; Correct. This option separates the information about the students, courses, and enrollments into separate collections, with each enrollment document containing a reference to a student and a course. This allows for efficient retrieval of information about a specific student's courses or a specific course's students, as well as efficient updates to the information about the enrollments.</p><p><br></p><p>One collection for students, with each student document containing an array of references to the courses they are enrolled in. -&gt; Incorrect. This option stores the information about the courses each student is enrolled in within the student document, which can lead to performance issues as the arrays grow in size and complexity.</p><p><br></p><p>One collection for students, with each student document containing an array of embedded documents for the courses they are enrolled in. -&gt; Incorrect. This option stores the information about the courses each student is enrolled in as embedded documents within the student document, which can lead to performance issues as the documents grow in size and complexity.</p><p><br></p><p>One collection for courses, with each course document containing an array of references to the students enrolled in the course. -&gt; Incorrect. This option stores the information about the relationships between courses and students as an array of references within each course document, which can lead to performance issues when retrieving information about a specific student's courses.</p>",
                "answers": [
                    "<p>One collection for students, with each student document containing an array of references to the courses they are enrolled in.</p>",
                    "<p>One collection for students, one collection for courses, and one collection for enrollments, with each enrollment document containing a reference to a student and a course.</p>",
                    "<p>One collection for students, with each student document containing an array of embedded documents for the courses they are enrolled in.</p>",
                    "<p>One collection for courses, with each course document containing an array of references to the students enrolled in the course.</p>"
                ]
            },
            "correct_response": [
                "b"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168676,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a collection named <code>reviews</code> that contains documents in the following format:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f5f95aae2e85f9e7b33be5a\"),\n   \"product_id\" : \"P001\",\n   \"username\" : \"user1\",\n   \"rating\" : 4,\n   \"review_text\" : \"Great product!\",\n   \"review_date\" : ISODate(\"2022-05-01T08:00:00Z\")\n}</pre><p><br></p><p>How can you calculate the average rating for each product, and sort the results in descending order of average rating using the MongoDB aggregation framework?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct answer:</p><p><br></p><pre class=\"prettyprint linenums\">db.reviews.aggregate([\n  { $group: { _id: \"$product_id\", avgRating: { $avg: \"$rating\" } } },\n  { $sort: { avgRating: -1 } }\n])</pre><p><br></p><p>The correct pipeline first groups the documents by the <code>\"product_id\"</code> field and calculates the average rating for each product using the <code>$avg</code> operator. It then sorts the result set in descending order of average rating using the <code>$sort</code> stage.</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.reviews.aggregate([\n  { $group: { _id: \"$product_id\", avgRating: { $avg: \"$rating\" } } },\n  { $sort: { avgRating: -1 } }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.reviews.aggregate([\n  { $sort: { rating: -1 } },\n  { $group: { _id: \"$product_id\", avgRating: { $avg: \"$rating\" } } }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.reviews.aggregate([\n  { $group: { _id: \"$product_id\", avgRating: { $avg: \"$rating\" } } },\n  { $sort: { rating: -1 } }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.reviews.aggregate([\n  { $sort: { avgRating: -1 } },\n  { $group: { _id: \"$product_id\", avgRating: { $sum: \"$rating\" } } }\n])</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168678,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a MongoDB database named <code>ecommerce</code> with several collections, including a <code>products</code> collection and an <code>orders</code> collection. The <code>products</code> collection contains documents in the following format:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f5f95aae2e85f9e7b33be5a\"),\n   \"product_name\" : \"Laptop\",\n   \"price\" : 1000,\n   \"category\" : \"electronics\"\n}</pre><p><br></p><p>The <code>orders</code> collection contains documents in the following format:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f5f95aae2e85f9e7b33be5b\"),\n   \"order_id\" : \"O001\",\n   \"product_id\" : ObjectId(\"5f5f95aae2e85f9e7b33be5a\"),\n   \"quantity\" : 2,\n   \"order_date\" : ISODate(\"2022-10-01T00:00:00Z\")\n}</pre><p><br></p><p>Which of the following MongoDB concepts is used to connect the <code>products</code> and <code>orders</code> collections and allow for retrieving information about the ordered products along with their details?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Reference -&gt; Correct. In MongoDB, references are used to connect collections. In this case, the <code>orders</code> collection references the <code>products</code> collection by storing the <code><strong>_id</strong></code> of the product documents in the <code>products</code> collection as the <code>product_id</code> field in the <code>orders</code> collection. This allows for retrieving information about the ordered products along with their details by performing a lookup operation that joins the <code>products</code> and <code>orders</code> collections based on the <code>product_id</code> field.</p>",
                "answers": [
                    "<p>Embedded Document</p>",
                    "<p>Reference</p>",
                    "<p>Sharding</p>",
                    "<p>Replication</p>"
                ]
            },
            "correct_response": [
                "b"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168680,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a MongoDB database with several collections, including a <code>students</code> collection and a <code>courses</code> collection. The <code>students</code> collection contains documents in the following format:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f5f95aae2e85f9e7b33be5a\"),\n   \"student_name\" : \"John Doe\",\n   \"student_id\" : \"S001\",\n   \"enrolled_courses\" : [\n      \"C001\",\n      \"C002\"\n   ]\n}</pre><p><br></p><p>The <code>courses</code> collection contains documents in the following format:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f5f95aae2e85f9e7b33be5b\"),\n   \"course_id\" : \"C001\",\n   \"course_name\" : \"Introduction to MongoDB\"\n}</pre><p><br></p><p>Which of the following MongoDB concepts is used to store multiple values for a single field in a document?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Array -&gt; Correct. In MongoDB, arrays are used to store multiple values for a single field in a document. In this case, the <code>\"enrolled_courses\"</code> field in the <code>students</code> collection is an array that stores the IDs of the courses that the student has enrolled in.</p>",
                "answers": [
                    "<p>Array</p>",
                    "<p>Reference</p>",
                    "<p>Embedded document</p>",
                    "<p>Sharding</p>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168682,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a MongoDB database with a <code>students</code> collection that contains documents in the following format:</p><p><br></p><pre class=\"prettyprint linenums\">{\n   \"_id\" : ObjectId(\"5f5f95aae2e85f9e7b33be5a\"),\n   \"name\" : \"John Doe\",\n   \"age\" : 25,\n   \"gender\" : \"Male\",\n   \"courses\" : [\n      {\n         \"course_name\" : \"MongoDB Fundamentals\",\n         \"grade\" : \"A\"\n      },\n      {\n         \"course_name\" : \"Advanced MongoDB\",\n         \"grade\" : \"B\"\n      }\n   ]\n}</pre><p><br></p><p>What is the MongoDB shell command to retrieve the number of courses taken by all students in the <code>students</code> collection?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>db.students.aggregate([{$group: {_id: \"$courses\", count: {$sum: 1}}}]).count()</code> -&gt; Correct. In MongoDB, the aggregation framework is used to perform operations on multiple documents and return a computed result. The <code>$group</code> operator is used to group documents by a specified expression and perform aggregate operations on each group. In this case, the <code>$group</code> operator is used to group the courses array by its values, and the <code>$sum</code> operator is used to sum up the number of courses. The <code>$group</code> expression uses the <code>$courses</code> field to group the documents, and the count field is used to keep track of the number of courses.</p><p><br></p><p><code>db.students.find({}).count()</code> -&gt; Incorrect. This option is used to find all documents in the <code>students</code> collection and retrieve the count of documents that match the specified query.</p><p><br></p><p><code>db.students.find().count()</code> -&gt; Incorrect. This option is used to find all documents in the <code>students</code> collection and retrieve the count of documents that match the query, which is empty.</p><p><br></p><p><code>db.students.count()</code> -&gt;&nbsp;Incorrect. This option is used to retrieve the count of documents in the <code>students</code> collection, which is not what is being asked for in this question.</p>",
                "answers": [
                    "<p><code>db.students.find({}).count()</code> </p>",
                    "<p><code>db.students.find().count()</code> </p>",
                    "<p><code>db.students.count()</code> </p>",
                    "<p><code>db.students.aggregate([{$group: {_id: \"$courses\", count: {$sum: 1}}}]).count()</code> </p>"
                ]
            },
            "correct_response": [
                "d"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168684,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Consider a MongoDB cluster consisting of 3 nodes, <code>node1</code>, <code>node2</code> and <code>node3</code>, running on the default port 27017. <code>node1</code> is the primary node, and <code>node2</code> and <code>node3</code> are secondary nodes. The replica set name is <code>\"rs0\"</code>. What is the correct command to add <code>node3</code> as a hidden member to the replica set <code>\"rs0\"</code>?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p><code>rs.add(node3, {priority: 0, hidden: true})</code> -&gt; Correct. The <code><strong>rs.add()</strong></code> method is used to add a new member to a replica set in MongoDB. By setting the priority to 0, we configure <code>node3</code> to be a hidden member, meaning it will not participate in elections for primary node, and it will only be used to receive changes from the primary node for data backups and disaster recovery. The <code><strong>hidden</strong></code> option, when set to <code><strong>true</strong></code>, makes the node hidden.</p><p><br></p><p><code>rs.add(node3:27017)</code> -&gt;&nbsp;Incorrect. It is missing the options for the <code><strong>rs.add()</strong></code> method.</p><p><br></p><p><code>rs.add(node3, {hidden: true})</code> -&gt; Incorrect. It only sets the <code><strong>hidden</strong></code> option to <code><strong>true</strong></code>, but does not set the priority to 0.</p><p><br></p><p><code>rs.add(node3, {priority: 0})</code> -&gt; Incorrect. It only sets the priority to 0, but does not set the <code><strong>hidden</strong></code> option to <code><strong>true</strong></code>.</p>",
                "answers": [
                    "<p><code>rs.add(node3:27017)</code> </p>",
                    "<p><code>rs.add(node3, {hidden: true})</code> </p>",
                    "<p><code>rs.add(node3, {priority: 0, hidden: true})</code> </p>",
                    "<p><code>rs.add(node3, {priority: 0})</code> </p>"
                ]
            },
            "correct_response": [
                "c"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168686,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>What is the behavior of MongoDB when sorting on a field that has both numeric and non-numeric values in the same collection?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>The sort order is based on the lexicographical order of the values. -&gt;&nbsp;Correct.</p><p>When sorting on a field in MongoDB that has both numeric and non-numeric values in the same collection, the sort order is based on the lexicographical order of the values. This means that the values are sorted as strings, rather than as numbers, which can result in unexpected behavior. For example, the value <code>\"10\"</code> would be considered greater than <code>\"2\"</code> when sorted lexicographically, even though 2 is a smaller number than 10. To avoid this issue, it's important to ensure that values in a given field are of the same type (e.g., either all numbers or all strings).</p>",
                "answers": [
                    "<p>The sort order is based on the type of the first value encountered for each field.</p>",
                    "<p>The sort order is based on the lexicographical order of the values.</p>",
                    "<p>The sort fails and returns an error.</p>",
                    "<p>The numeric values are sorted first, followed by the non-numeric values.</p>"
                ]
            },
            "correct_response": [
                "b"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168688,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>What is the correct syntax to insert multiple documents into a MongoDB collection named <code>sales</code> using the bulk write operation?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct answer:</p><p><br></p><pre class=\"prettyprint linenums\">db.sales.bulkWrite([\n  { insertOne: { name: \"Product A\", quantity: 10 } },\n  { insertOne: { name: \"Product B\", quantity: 5 } }\n])</pre><p><br></p><p>In MongoDB, to insert multiple documents into a collection using the bulk write operation, you can use the <code>bulkWrite()</code> method on the collection object and pass an array of write operations as the argument. The syntax would be <code>db.collection_name.bulkWrite([{ write_operation1 }, { write_operation2 }, ..., { write_operationN }])</code> where <code>collection_name</code> is the name of the collection you want to insert into and each <code>{ write_operation }</code> is an operation you want to perform such as <code>insertOne</code> for inserting one document.</p><p><br></p><pre class=\"prettyprint linenums\">db.sales.bulkWrite({\n  insertOne: [\n    { name: \"Product A\", quantity: 10 },\n    { name: \"Product B\", quantity: 5 }\n  ]\n})</pre><p><br></p><p>The <code>insertOne</code> write operation should be enclosed in separate objects in the array.</p><p><br></p><pre class=\"prettyprint linenums\">db.sales.insertMany(\n  [\n    { name: \"Product A\", quantity: 10 },\n    { name: \"Product B\", quantity: 5 }\n  ],\n  { bulkWrite: true }\n)</pre><p><br></p><p><code>bulkWrite</code> is not a valid write operation for the <code>insertMany()</code> method.</p><p><br></p><pre class=\"prettyprint linenums\">db.sales.bulkWrite({\n  insertMany: [\n    { name: \"Product A\", quantity: 10 },\n    { name: \"Product B\", quantity: 5 }\n  ]\n})</pre><p><br></p><p><code>insertMany</code> is not a valid write operation for the <code>bulkWrite()</code> method.</p><p><br></p><p>https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.sales.bulkWrite([\n  { insertOne: { name: \"Product A\", quantity: 10 } },\n  { insertOne: { name: \"Product B\", quantity: 5 } }\n])</pre>",
                    "<pre class=\"prettyprint linenums\">db.sales.bulkWrite({\n  insertOne: [\n    { name: \"Product A\", quantity: 10 },\n    { name: \"Product B\", quantity: 5 }\n  ]\n})</pre>",
                    "<pre class=\"prettyprint linenums\">db.sales.insertMany(\n  [\n    { name: \"Product A\", quantity: 10 },\n    { name: \"Product B\", quantity: 5 }\n  ],\n  { bulkWrite: true }\n)</pre>",
                    "<pre class=\"prettyprint linenums\">db.sales.bulkWrite({\n  insertMany: [\n    { name: \"Product A\", quantity: 10 },\n    { name: \"Product B\", quantity: 5 }\n  ]\n})</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        },
        {
            "_class": "assessment",
            "id": 56168690,
            "assessment_type": "multiple-choice",
            "created": "2023-02-09T14:22:23Z",
            "prompt": {
                "question": "<p>Which of the following statements correctly inserts multiple documents into a MongoDB collection named <code>orders</code> with the options to bypass document validation and continue processing even if an error occurs during insertion?</p>",
                "relatedLectureIds": "",
                "feedbacks": [
                    "",
                    "",
                    "",
                    ""
                ],
                "explanation": "<p>Correct answer:</p><p><br></p><pre class=\"prettyprint linenums\">db.orders.insertMany(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { validate: false, continueOnError: true }\n)</pre><p><br></p><p>In MongoDB, to insert multiple documents into a collection with the options to bypass document validation and continue processing even if an error occurs during insertion, you can use the <code>insertMany()</code> method with the options <code>validate</code> set to false and <code>continueOnError</code> set to true. The syntax would be <code>db.collection_name.insertMany([{ document1 }, { document2 }, ..., { documentN }], { validate: false, continueOnError: true })</code>.</p><p><br></p><pre class=\"prettyprint linenums\">db.orders.insert(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { validate: false, continueOnError: true }\n)</pre><p><br></p><p><code>insert()</code> is a method for inserting one document, not multiple documents.</p><p><br></p><pre class=\"prettyprint linenums\">db.orders.insertMany(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { bypassDocumentValidation: false, continueOnError: true }\n)</pre><p><br></p><p><code>bypassDocumentValidation</code> is not a valid option for the <code>insertMany()</code> method.</p><p><br></p><pre class=\"prettyprint linenums\">db.orders.insert(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { bypassDocumentValidation: false, continueOnError: true }\n)</pre><p><br></p><p><code>insert</code> is a method for inserting one document, not multiple documents and <code>bypassDocumentValidation</code> is not a valid option for the <code>insert</code> method.</p>",
                "answers": [
                    "<pre class=\"prettyprint linenums\">db.orders.insertMany(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { validate: false, continueOnError: true }\n)</pre>",
                    "<pre class=\"prettyprint linenums\">db.orders.insert(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { validate: false, continueOnError: true }\n)</pre>",
                    "<pre class=\"prettyprint linenums\">db.orders.insertMany(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { bypassDocumentValidation: false, continueOnError: true }\n)</pre>",
                    "<pre class=\"prettyprint linenums\">db.orders.insert(\n  [\n    { item: \"Keyboard\", quantity: 10, price: 20.99 },\n    { item: \"Mouse\", quantity: 5, price: 14.99 }\n  ],\n  { bypassDocumentValidation: false, continueOnError: true }\n)</pre>"
                ]
            },
            "correct_response": [
                "a"
            ],
            "updated": "2023-02-09T14:22:23Z",
            "section": ""
        }
    ]
}
